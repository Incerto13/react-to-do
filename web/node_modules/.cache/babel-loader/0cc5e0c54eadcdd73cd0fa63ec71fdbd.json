{"ast":null,"code":"var _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ChecklistForm.js\";\n\n/* THIS PAGE IS FOR EDITING AN EXISTING CHECKLIST!!!\nThis page will allow editing the title, \nediting the tasks (title, body and category for each)\ndeleting and and also adding new tasks to the checklist (minimum of 2 tasks) \n */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextInput from \"../common/TextInput\";\nimport SelectInput from \"../common/SelectInput\";\n/* This form handles Adding and Editing an existing form based\non whether or not there is an id present\n*/\n\nconst ChecklistForm = ({\n  checklist,\n  categories,\n  onSave,\n  onChange,\n  saving = false,\n  errors = {}\n}) => {\n  return React.createElement(\"form\", {\n    onSubmit: onSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, checklist.id ? \"Edit\" : \"Add\", \" Checklist\"), errors.onSave && React.createElement(\"div\", {\n    className: \"alert alert-danger\",\n    role: \"alert\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, errors.onSave), React.createElement(TextInput, {\n    name: \"title\",\n    label: \"Title\",\n    value: checklist.title,\n    onChange: onChange,\n    error: errors.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), checklist.tasks.map((task, index) => {\n    return React.createElement(\"div\", {\n      key: task.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(TextInput, {\n      name: \"title\",\n      label: \"Title\",\n      value: task.title,\n      onChange: () => onChange(index),\n      error: errors.tasks.id.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(TextInput, {\n      name: \"body\",\n      label: \"Body\",\n      value: task.body,\n      onChange: () => onChange(index),\n      error: errors.tasks.id.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(SelectInput, {\n      name: \"category\",\n      label: \"Category\",\n      value: task.category,\n      defaultOption: \"Select Category\",\n      options: categories.map(category => ({\n        value: category.name,\n        text: category.name\n      })),\n      onChange: () => onChange(index),\n      error: errors.tasks.id.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })));\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: saving,\n    className: \"btn btn-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, saving ? \"Saving...\" : \"Save\"));\n};\n\nChecklistForm.propTypes = {\n  categories: PropTypes.array.isRequired,\n  checklist: PropTypes.object.isRequired,\n  errors: PropTypes.object,\n  onSave: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  saving: PropTypes.bool\n};\nexport default ChecklistForm;","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ChecklistForm.js"],"names":["React","PropTypes","TextInput","SelectInput","ChecklistForm","checklist","categories","onSave","onChange","saving","errors","id","title","tasks","map","task","index","body","category","value","name","text","propTypes","array","isRequired","object","func","bool"],"mappings":"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","sourcesContent":["/* THIS PAGE IS FOR EDITING AN EXISTING CHECKLIST!!!\nThis page will allow editing the title, \nediting the tasks (title, body and category for each)\ndeleting and and also adding new tasks to the checklist (minimum of 2 tasks) \n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextInput from \"../common/TextInput\";\nimport SelectInput from \"../common/SelectInput\";\n\n/* This form handles Adding and Editing an existing form based\non whether or not there is an id present\n*/\n\nconst ChecklistForm = ({\n  checklist,\n  categories,\n  onSave,\n  onChange,\n  saving = false,\n  errors = {}\n}) => {\n  return (\n    <form onSubmit={onSave}>\n      <h2>{checklist.id ? \"Edit\" : \"Add\"} Checklist</h2>\n      {errors.onSave && (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {errors.onSave}\n        </div>\n      )}\n\n      <TextInput\n        name=\"title\"\n        label=\"Title\"\n        value={checklist.title}\n        onChange={onChange}\n        error={errors.title}\n      />\n\n      {checklist.tasks.map((task, index) => {\n        return (\n          <div key={task.id}>\n            <div>\n              <TextInput\n                name=\"title\"\n                label=\"Title\"\n                value={task.title}\n                onChange={() => onChange(index)}\n                error={errors.tasks.id.title}\n              />\n\n              <TextInput\n                name=\"body\"\n                label=\"Body\"\n                value={task.body}\n                onChange={() => onChange(index)}\n                error={errors.tasks.id.title}\n              />\n\n              <SelectInput\n                name=\"category\"\n                label=\"Category\"\n                value={task.category}\n                defaultOption=\"Select Category\"\n                options={categories.map(category => ({\n                  value: category.name,\n                  text: category.name\n                }))}\n                onChange={() => onChange(index)}\n                error={errors.tasks.id.title}\n              />\n            </div>\n          </div>\n        );\n      })}\n\n      <button type=\"submit\" disabled={saving} className=\"btn btn-primary\">\n        {saving ? \"Saving...\" : \"Save\"}\n      </button>\n    </form>\n  );\n};\n\nChecklistForm.propTypes = {\n  categories: PropTypes.array.isRequired,\n  checklist: PropTypes.object.isRequired,\n  errors: PropTypes.object,\n  onSave: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  saving: PropTypes.bool\n};\n\nexport default ChecklistForm;\n"]},"metadata":{},"sourceType":"module"}