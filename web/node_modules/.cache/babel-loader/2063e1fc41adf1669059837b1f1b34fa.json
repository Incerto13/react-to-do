{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/tasks/ManageTaskPage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as taskActions from \"../../redux/actions/taskActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\nimport TaskForm from \"./TaskForm\"; // import { newTask } from \"../../../tools/mockData\";\n\nimport newTask from \"./newTask\";\n\nfunction ManageTaskPage(_ref) {\n  let tasks = _ref.tasks,\n      categories = _ref.categories,\n      props = _objectWithoutProperties(_ref, [\"tasks\", \"categories\"]);\n\n  const _useState = useState(_objectSpread({}, props.task)),\n        _useState2 = _slicedToArray(_useState, 2),\n        task = _useState2[0],\n        setTask = _useState2[1]; // initialize to empty newTask\n\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1]; // initialize to empty object\n\n\n  useEffect(() => {\n    if (tasks.length === 0) {\n      props.actions.fetchTasks().catch(error => {\n        alert(\"Loading tasks failed\" + error);\n      });\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [categories.length, props, tasks.length]); // empty dependency array = only run useEffect once\n  // centralized change-handler\n\n  function handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // retain local ref to event\n\n    setTask(prevTask => _objectSpread({}, prevTask, {\n      // needed to save previous changes between saves\n      [name]: value\n    }), () => console.log);\n  }\n\n  function handleSave(event) {\n    event.preventDefault();\n    props.actions.saveTask(task);\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(TaskForm, {\n    task: task,\n    errors: errors,\n    categories: categories,\n    onChange: handleChange,\n    onSave: handleSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\n\nfunction mapStateToProps(state) {\n  return {\n    task: newTask,\n    tasks: state.tasks,\n    categories: state.categories\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageTaskPage.propTypes = {\n  task: PropTypes.object.isRequired,\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  categories: PropTypes.array.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchTasks: bindActionCreators(taskActions.fetchTasks, dispatch),\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch),\n      saveTask: bindActionCreators(taskActions.saveTask, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTaskPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/tasks/ManageTaskPage.js"],"names":["React","useEffect","useState","PropTypes","connect","taskActions","categoryActions","bindActionCreators","TaskForm","newTask","ManageTaskPage","tasks","categories","props","task","setTask","errors","setErrors","length","actions","fetchTasks","catch","error","alert","fetchCategories","handleChange","event","target","name","value","prevTask","console","log","handleSave","preventDefault","saveTask","mapStateToProps","state","propTypes","object","isRequired","array","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as taskActions from \"../../redux/actions/taskActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\nimport TaskForm from \"./TaskForm\";\n// import { newTask } from \"../../../tools/mockData\";\nimport newTask from \"./newTask\";\n\nfunction ManageTaskPage({ tasks, categories, ...props }) {\n  const [task, setTask] = useState({ ...props.task }); // initialize to empty newTask\n  const [errors, setErrors] = useState({}); // initialize to empty object\n\n  useEffect(() => {\n    if (tasks.length === 0) {\n      props.actions.fetchTasks().catch(error => {\n        alert(\"Loading tasks failed\" + error);\n      });\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [categories.length, props, tasks.length]); // empty dependency array = only run useEffect once\n\n  // centralized change-handler\n  function handleChange(event) {\n    const { name, value } = event.target; // retain local ref to event\n    setTask(\n      prevTask => ({\n        ...prevTask, // needed to save previous changes between saves\n        [name]: value\n      }),\n      () => console.log\n    );\n  }\n\n  function handleSave(event) {\n    event.preventDefault();\n    props.actions.saveTask(task);\n  }\n\n  return (\n    <>\n      <TaskForm\n        task={task}\n        errors={errors}\n        categories={categories}\n        onChange={handleChange}\n        onSave={handleSave}\n      />\n    </>\n  );\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state) {\n  return {\n    task: newTask,\n    tasks: state.tasks,\n    categories: state.categories\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageTaskPage.propTypes = {\n  task: PropTypes.object.isRequired,\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  categories: PropTypes.array.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchTasks: bindActionCreators(taskActions.fetchTasks, dispatch),\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      ),\n      saveTask: bindActionCreators(taskActions.saveTask, dispatch)\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageTaskPage);\n"]},"metadata":{},"sourceType":"module"}