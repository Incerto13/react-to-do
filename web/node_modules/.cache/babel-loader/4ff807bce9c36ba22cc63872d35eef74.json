{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ManageChecklistPage.js\";\n// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\nimport React, { useEffect, useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport usePrevious from \"../custom_hooks/usePrevious\"; // import updateChecklist from \"../custom_hooks/updateChecklist\";\n\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport ChecklistForm from \"./ChecklistForm\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage(_ref) {\n  let checklists = _ref.checklists,\n      categories = _ref.categories,\n      history = _ref.history,\n      props = _objectWithoutProperties(_ref, [\"checklists\", \"categories\", \"history\"]);\n\n  const _useState = useState(_objectSpread({}, props.checklist)),\n        _useState2 = _slicedToArray(_useState, 2),\n        checklist = _useState2[0],\n        setChecklist = _useState2[1]; // initialize to empty newTask\n\n\n  const prevChecklist = usePrevious(checklist);\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1]; // initialize to empty object\n\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        initialPageLoad = _useState6[0],\n        setInitialPageLoad = _useState6[1]; // should only fetch checklist from api once\n\n\n  const taskToggling = useRef(false);\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isTaskToggling = _useState8[0],\n        setIsTaskToggling = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        savingForm = _useState10[0],\n        setSavingForm = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        taskUpdated = _useState12[0],\n        setTaskUpdated = _useState12[1];\n\n  const _useState13 = useState(false),\n        _useState14 = _slicedToArray(_useState13, 2),\n        displayForm = _useState14[0],\n        setDisplayForm = _useState14[1]; // will need a variable for showing Form v. view\n\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else if (!initialPageLoad) {\n      //set checklist in local state to update when prop updates\n      setChecklist(_objectSpread({}, props.checklist)); // only once on initial page load\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [props.actions, checklists.length, props.checklist, categories.length, initialPageLoad]);\n  console.log(\"[Inital Render] - checklistRef.current: \", taskToggling.current);\n\n  async function handleTaskToggle(event, task, index) {\n    const completed = task.completed;\n    const newStatus = event.target.value;\n    const newTasks = [...checklist.tasks];\n    newTasks[index].completed = !completed; // need to change this to be based on index for sort to work\n    // replace old array with new one\n\n    taskToggling.current = true; // await setIsTaskToggling(taskToggling.current);\n\n    await setChecklist(_objectSpread({}, props.checklist, {\n      tasks: newTasks\n    })); // console.log(\"new Status ** : \", checklist.tasks[index].completed);\n\n    console.log(\"taskToggling.current: \", taskToggling.current);\n  } // useEffect(() => {\n  //   if (isTaskToggling) {\n  //     console.log(\"isTaskToggling: \", isTaskToggling);\n  //     const saveChecklist = async () => {\n  //       props.actions\n  //         .saveChecklist(checklist)\n  //         .then(() => {\n  //           toast.success(\"Task updated.\");\n  //         })\n  //         .catch(error => {\n  //           setErrors({ onSave: error.message });\n  //         });\n  //     };\n  //     saveChecklist();\n  //     const setToFalse = async () => {\n  //       await setIsTaskToggling(false);\n  //     };\n  //     setToFalse();\n  //     console.log(\"***isTaskToggling: \", isTaskToggling);\n  //   }\n  // }, [props.actions, checklist, isTaskToggling]);\n\n\n  useEffect(() => {\n    if (taskToggling.current //   // typeof prevChecklist !== undefined &&\n    //   // prevChecklist.title !== \"\" &&\n    //   // prevChecklist.id == null &&\n    //   checklist !== prevChecklist\n    ) {\n        const saveChecklist = async () => {\n          await props.actions.saveChecklist(checklist).then(() => {\n            toast.success(\"Task updated.\");\n          }).catch(error => {\n            setErrors({\n              onSave: error.message\n            });\n          });\n        };\n\n        saveChecklist();\n      }\n  }, [checklist, prevChecklist, props.actions, taskToggling]); // centralized change-handler (on form only)\n\n  function handleChange(event, index) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // retain local ref to event\n    // const index = event.target.getAttribute(\"index\");\n\n    console.log(index); // will only apply to elements in the task array\n\n    if (index || index === 0) {\n      const newTasks = [...checklist.tasks];\n      newTasks[index][name] = value;\n      setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n        // maintain all other parts of the object\n        tasks: newTasks\n      }));\n    } else {\n      setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n        [name]: value\n      }));\n    }\n\n    console.log(checklist);\n  }\n\n  function formIsValid() {\n    const title = checklist.title,\n          tasks = checklist.tasks;\n    const errors = {};\n    if (!title) errors.title = \"Title is required.\"; // if (!category) errors.category = \"Category is required.\";\n\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n    setErrors(errors); // Form is valid if the errors object still has no properties\n\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSaveForm(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSavingForm(true);\n    props.actions.saveChecklist(checklist).then(() => {\n      console.log(checklist);\n      toast.success(\"Checklist saved.\"); // history is passed in from react-router from <Route>\n      // history.push(\"/checklists\"); // redirect to '/checklists' page\n    }).catch(error => {\n      setSavingForm(false);\n      setErrors({\n        onSave: error.message\n      });\n    });\n  }\n\n  return React.createElement(React.Fragment, null, !displayForm && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, checklist.title), React.createElement(\"button\", {\n    style: {\n      marginBottom: 20\n    },\n    className: \"btn btn-primary add-task\",\n    onClick: () => setDisplayForm(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"Edit Checklist\"), React.createElement(ChecklistTaskView, {\n    tasks: checklist.tasks,\n    onTaskToggle: handleTaskToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  })), displayForm && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(ChecklistForm, {\n    checklist: checklist,\n    errors: errors,\n    categories: categories,\n    onChange: handleChange,\n    onSave: handleSaveForm,\n    saving: savingForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  })));\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist = slug && state.checklists.length > 0 ? getChecklistBySlug(state.checklists, slug) : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(checklistActions.fetchChecklists, dispatch),\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch),\n      saveChecklist: bindActionCreators(checklistActions.saveChecklist, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageChecklistPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ManageChecklistPage.js"],"names":["React","useEffect","useState","useRef","PropTypes","connect","checklistActions","categoryActions","usePrevious","ChecklistTaskView","ChecklistForm","newChecklist","bindActionCreators","toast","ManageChecklistPage","checklists","categories","history","props","checklist","setChecklist","prevChecklist","errors","setErrors","initialPageLoad","setInitialPageLoad","taskToggling","isTaskToggling","setIsTaskToggling","savingForm","setSavingForm","taskUpdated","setTaskUpdated","displayForm","setDisplayForm","length","actions","fetchChecklists","catch","error","alert","fetchCategories","console","log","current","handleTaskToggle","event","task","index","completed","newStatus","target","value","newTasks","tasks","saveChecklist","then","success","onSave","message","handleChange","name","formIsValid","title","Object","keys","handleSaveForm","preventDefault","marginBottom","getChecklistBySlug","slug","find","mapStateToProps","state","ownProps","match","params","propTypes","object","isRequired","array","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport usePrevious from \"../custom_hooks/usePrevious\";\n// import updateChecklist from \"../custom_hooks/updateChecklist\";\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport ChecklistForm from \"./ChecklistForm\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage({ checklists, categories, history, ...props }) {\n  const [checklist, setChecklist] = useState({ ...props.checklist }); // initialize to empty newTask\n  const prevChecklist = usePrevious(checklist);\n  const [errors, setErrors] = useState({}); // initialize to empty object\n  const [initialPageLoad, setInitialPageLoad] = useState(false); // should only fetch checklist from api once\n  const taskToggling = useRef(false);\n\n  const [isTaskToggling, setIsTaskToggling] = useState(null);\n  const [savingForm, setSavingForm] = useState(false);\n  const [taskUpdated, setTaskUpdated] = useState(false);\n  const [displayForm, setDisplayForm] = useState(false);\n  // will need a variable for showing Form v. view\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else if (!initialPageLoad) {\n      //set checklist in local state to update when prop updates\n      setChecklist({ ...props.checklist });\n      // only once on initial page load\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [\n    props.actions,\n    checklists.length,\n    props.checklist,\n    categories.length,\n    initialPageLoad\n  ]);\n\n  console.log(\"[Inital Render] - checklistRef.current: \", taskToggling.current);\n\n  async function handleTaskToggle(event, task, index) {\n    const { completed } = task;\n    const newStatus = event.target.value;\n    const newTasks = [...checklist.tasks];\n    newTasks[index].completed = !completed; // need to change this to be based on index for sort to work\n    // replace old array with new one\n    taskToggling.current = true;\n    // await setIsTaskToggling(taskToggling.current);\n    await setChecklist({ ...props.checklist, tasks: newTasks });\n\n    // console.log(\"new Status ** : \", checklist.tasks[index].completed);\n    console.log(\"taskToggling.current: \", taskToggling.current);\n  }\n\n  // useEffect(() => {\n  //   if (isTaskToggling) {\n  //     console.log(\"isTaskToggling: \", isTaskToggling);\n  //     const saveChecklist = async () => {\n  //       props.actions\n  //         .saveChecklist(checklist)\n  //         .then(() => {\n  //           toast.success(\"Task updated.\");\n  //         })\n  //         .catch(error => {\n  //           setErrors({ onSave: error.message });\n  //         });\n  //     };\n  //     saveChecklist();\n  //     const setToFalse = async () => {\n  //       await setIsTaskToggling(false);\n  //     };\n  //     setToFalse();\n\n  //     console.log(\"***isTaskToggling: \", isTaskToggling);\n  //   }\n  // }, [props.actions, checklist, isTaskToggling]);\n\n  useEffect(() => {\n    if (\n      taskToggling.current\n      //   // typeof prevChecklist !== undefined &&\n      //   // prevChecklist.title !== \"\" &&\n      //   // prevChecklist.id == null &&\n      //   checklist !== prevChecklist\n    ) {\n      const saveChecklist = async () => {\n        await props.actions\n          .saveChecklist(checklist)\n          .then(() => {\n            toast.success(\"Task updated.\");\n          })\n          .catch(error => {\n            setErrors({ onSave: error.message });\n          });\n      };\n      saveChecklist();\n    }\n  }, [checklist, prevChecklist, props.actions, taskToggling]);\n\n  // centralized change-handler (on form only)\n  function handleChange(event, index) {\n    const { name, value } = event.target; // retain local ref to event\n    // const index = event.target.getAttribute(\"index\");\n    console.log(index);\n    // will only apply to elements in the task array\n    if (index || index === 0) {\n      const newTasks = [...checklist.tasks];\n      newTasks[index][name] = value;\n      setChecklist(prevChecklist => ({\n        ...prevChecklist, // maintain all other parts of the object\n        tasks: newTasks\n      }));\n    } else {\n      setChecklist(prevChecklist => ({\n        ...prevChecklist,\n        [name]: value\n      }));\n    }\n    console.log(checklist);\n  }\n\n  function formIsValid() {\n    const { title, tasks } = checklist;\n    const errors = {};\n\n    if (!title) errors.title = \"Title is required.\";\n    // if (!category) errors.category = \"Category is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n\n    setErrors(errors);\n    // Form is valid if the errors object still has no properties\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSaveForm(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSavingForm(true);\n    props.actions\n      .saveChecklist(checklist)\n      .then(() => {\n        console.log(checklist);\n        toast.success(\"Checklist saved.\");\n        // history is passed in from react-router from <Route>\n        // history.push(\"/checklists\"); // redirect to '/checklists' page\n      })\n      .catch(error => {\n        setSavingForm(false);\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  return (\n    <>\n      {!displayForm && (\n        <div>\n          <h2>{checklist.title}</h2>\n\n          <button\n            style={{ marginBottom: 20 }}\n            className=\"btn btn-primary add-task\"\n            onClick={() => setDisplayForm(true)}\n          >\n            Edit Checklist\n          </button>\n\n          <ChecklistTaskView\n            tasks={checklist.tasks}\n            onTaskToggle={handleTaskToggle}\n          />\n        </div>\n      )}\n\n      {displayForm && (\n        <div>\n          <ChecklistForm\n            checklist={checklist}\n            errors={errors}\n            categories={categories}\n            onChange={handleChange}\n            onSave={handleSaveForm}\n            saving={savingForm}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist =\n    slug && state.checklists.length > 0\n      ? getChecklistBySlug(state.checklists, slug)\n      : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(\n        checklistActions.fetchChecklists,\n        dispatch\n      ),\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      ),\n      saveChecklist: bindActionCreators(\n        checklistActions.saveChecklist,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageChecklistPage);\n"]},"metadata":{},"sourceType":"module"}