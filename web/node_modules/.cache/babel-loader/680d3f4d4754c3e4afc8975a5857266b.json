{"ast":null,"code":"import * as types from \"./actionTypes\";\nimport * as categoryApi from \"../../api/categoryApi\"; // These are ACTION CREATORS for the category reducer (department) of the store\n// returns entire array of categories\n\nexport function fetchCategories() {\n  return function (dispatch) {\n    return categoryApi.getCategories().then(categories => {\n      // separate action creator for successfull api call\n      dispatch({\n        type: types.FETCH_CATEGORIES_SUCCESS,\n        categories: categories\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\n/* Action Creator Steps: \n   1) API IS CALLED TO UPDATE THE DB WITH NEW/UPDATED OBJECT ~ (UPDATE THE DB)\n   2) THEN THE ACTION IS CREATED AND SENT VIA DISPATCH TO THE REDUCER ~ (UPDATE INTERNAL STATE)\n\nthis method creates one of two potential actions on a conditional basis\n either update or create depending on if there's already an id\n*/\n\nexport function saveCategory(category) {\n  return function (dispatch, getState) {\n    return categoryApi.saveCategory(category).then(savedCategory => {\n      category.id ? dispatch({\n        type: types.UPDATE_CATEGORY_SUCCESS,\n        category: savedCategory\n      }) : dispatch({\n        type: types.CREATE_CATEGORY_SUCCESS,\n        category: savedCategory\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport function deleteCategory(category) {\n  return function (dispatch) {\n    // Doing optimistic delete, so not dispatching begin/end api call\n    // actions, or apiCallError action since we're not showing the loading status for this.\n    dispatch({\n      type: types.DELETE_CATEGORY_OPTIMISTIC,\n      category\n    });\n    return categoryApi.deleteCategory(category.id);\n  };\n}","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do/src/redux/actions/categoryActions.js"],"names":["types","categoryApi","fetchCategories","dispatch","getCategories","then","categories","type","FETCH_CATEGORIES_SUCCESS","catch","error","saveCategory","category","getState","savedCategory","id","UPDATE_CATEGORY_SUCCESS","CREATE_CATEGORY_SUCCESS","deleteCategory","DELETE_CATEGORY_OPTIMISTIC"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;AACA,OAAO,KAAKC,WAAZ,MAA6B,uBAA7B,C,CAEA;AAEA;;AACA,OAAO,SAASC,eAAT,GAA2B;AAChC,SAAO,UAASC,QAAT,EAAmB;AACxB,WAAOF,WAAW,CACfG,aADI,GAEJC,IAFI,CAECC,UAAU,IAAI;AAClB;AACAH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEP,KAAK,CAACQ,wBADL;AAEPF,QAAAA,UAAU,EAAEA;AAFL,OAAD,CAAR;AAID,KARI,EASJG,KATI,CASEC,KAAK,IAAI;AACd,YAAMA,KAAN;AACD,KAXI,CAAP;AAYD,GAbD;AAcD;AAED;;;;;;;;AAOA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AACrC,SAAO,UAAST,QAAT,EAAmBU,QAAnB,EAA6B;AAClC,WAAOZ,WAAW,CACfU,YADI,CACSC,QADT,EAEJP,IAFI,CAECS,aAAa,IAAI;AACrBF,MAAAA,QAAQ,CAACG,EAAT,GACIZ,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEP,KAAK,CAACgB,uBADL;AAEPJ,QAAAA,QAAQ,EAAEE;AAFH,OAAD,CADZ,GAKIX,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEP,KAAK,CAACiB,uBADL;AAEPL,QAAAA,QAAQ,EAAEE;AAFH,OAAD,CALZ;AASD,KAZI,EAaJL,KAbI,CAaEC,KAAK,IAAI;AACd,YAAMA,KAAN;AACD,KAfI,CAAP;AAgBD,GAjBD;AAkBD;AAED,OAAO,SAASQ,cAAT,CAAwBN,QAAxB,EAAkC;AACvC,SAAO,UAAST,QAAT,EAAmB;AACxB;AACA;AACAA,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEP,KAAK,CAACmB,0BAAd;AAA0CP,MAAAA;AAA1C,KAAD,CAAR;AACA,WAAOX,WAAW,CAACiB,cAAZ,CAA2BN,QAAQ,CAACG,EAApC,CAAP;AACD,GALD;AAMD","sourcesContent":["import * as types from \"./actionTypes\";\nimport * as categoryApi from \"../../api/categoryApi\";\n\n// These are ACTION CREATORS for the category reducer (department) of the store\n\n// returns entire array of categories\nexport function fetchCategories() {\n  return function(dispatch) {\n    return categoryApi\n      .getCategories()\n      .then(categories => {\n        // separate action creator for successfull api call\n        dispatch({\n          type: types.FETCH_CATEGORIES_SUCCESS,\n          categories: categories\n        });\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n}\n\n/* Action Creator Steps: \n   1) API IS CALLED TO UPDATE THE DB WITH NEW/UPDATED OBJECT ~ (UPDATE THE DB)\n   2) THEN THE ACTION IS CREATED AND SENT VIA DISPATCH TO THE REDUCER ~ (UPDATE INTERNAL STATE)\n\nthis method creates one of two potential actions on a conditional basis\n either update or create depending on if there's already an id\n*/\nexport function saveCategory(category) {\n  return function(dispatch, getState) {\n    return categoryApi\n      .saveCategory(category)\n      .then(savedCategory => {\n        category.id\n          ? dispatch({\n              type: types.UPDATE_CATEGORY_SUCCESS,\n              category: savedCategory\n            })\n          : dispatch({\n              type: types.CREATE_CATEGORY_SUCCESS,\n              category: savedCategory\n            });\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n}\n\nexport function deleteCategory(category) {\n  return function(dispatch) {\n    // Doing optimistic delete, so not dispatching begin/end api call\n    // actions, or apiCallError action since we're not showing the loading status for this.\n    dispatch({ type: types.DELETE_CATEGORY_OPTIMISTIC, category });\n    return categoryApi.deleteCategory(category.id);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}