{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/tasks/ManageTaskPage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as taskActions from \"../../redux/actions/taskActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\nimport TaskForm from \"./TaskForm\"; // import { newTask } from \"../../../tools/mockData\";\n\nimport newTask from \"./newTask\";\n\nfunction ManageTaskPage(_ref) {\n  let tasks = _ref.tasks,\n      categories = _ref.categories,\n      fetchTasks = _ref.fetchTasks,\n      fetchCategories = _ref.fetchCategories,\n      props = _objectWithoutProperties(_ref, [\"tasks\", \"categories\", \"fetchTasks\", \"fetchCategories\"]);\n\n  const _useState = useState(_objectSpread({}, props.task)),\n        _useState2 = _slicedToArray(_useState, 2),\n        task = _useState2[0],\n        setTask = _useState2[1]; // set initial value to empty newTask\n\n\n  useState;\n  useEffect(() => {\n    if (tasks.length === 0) {\n      fetchTasks().catch(error => {\n        alert(\"Loading tasks failed\" + error);\n      });\n    }\n\n    if (categories.length === 0) {\n      fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [categories.length, fetchCategories, fetchTasks, tasks.length]); // empty dependency array = only run useEffect once\n\n  return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Manage Task\"));\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\n\nfunction mapStateToProps(state) {\n  return {\n    task: newTask,\n    tasks: state.tasks,\n    categories: state.categories\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageTaskPage.propTypes = {\n  task: PropTypes.object.isRequired,\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  categories: PropTypes.array.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchTasks: bindActionCreators(taskActions.fetchTasks, dispatch),\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTaskPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/tasks/ManageTaskPage.js"],"names":["React","useEffect","useState","PropTypes","connect","taskActions","categoryActions","bindActionCreators","TaskForm","newTask","ManageTaskPage","tasks","categories","fetchTasks","fetchCategories","props","task","setTask","length","catch","error","alert","mapStateToProps","state","propTypes","object","isRequired","array","actions","mapDispatchToProps","dispatch"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,WAAZ,MAA6B,iCAA7B;AACA,OAAO,KAAKC,eAAZ,MAAiC,qCAAjC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,SAASC,cAAT,OAMG;AAAA,MALDC,KAKC,QALDA,KAKC;AAAA,MAJDC,UAIC,QAJDA,UAIC;AAAA,MAHDC,UAGC,QAHDA,UAGC;AAAA,MAFDC,eAEC,QAFDA,eAEC;AAAA,MADEC,KACF;;AAAA,oBACuBb,QAAQ,mBAAMa,KAAK,CAACC,IAAZ,EAD/B;AAAA;AAAA,QACMA,IADN;AAAA,QACYC,OADZ,kBACoD;;;AAErDf,EAAAA,QAAQ;AAERD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,KAAK,CAACO,MAAN,KAAiB,CAArB,EAAwB;AACtBL,MAAAA,UAAU,GAAGM,KAAb,CAAmBC,KAAK,IAAI;AAC1BC,QAAAA,KAAK,CAAC,yBAAyBD,KAA1B,CAAL;AACD,OAFD;AAGD;;AAED,QAAIR,UAAU,CAACM,MAAX,KAAsB,CAA1B,EAA6B;AAC3BJ,MAAAA,eAAe,GAAGK,KAAlB,CAAwBC,KAAK,IAAI;AAC/BC,QAAAA,KAAK,CAAC,8BAA8BD,KAA/B,CAAL;AACD,OAFD;AAGD;AACF,GAZQ,EAYN,CAACR,UAAU,CAACM,MAAZ,EAAoBJ,eAApB,EAAqCD,UAArC,EAAiDF,KAAK,CAACO,MAAvD,CAZM,CAAT,CALC,CAiBmE;;AAEpE,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF;AAKD,C,CAED;;;AACA,SAASI,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLP,IAAAA,IAAI,EAAEP,OADD;AAELE,IAAAA,KAAK,EAAEY,KAAK,CAACZ,KAFR;AAGLC,IAAAA,UAAU,EAAEW,KAAK,CAACX;AAHb,GAAP;AAKD;AAED;;;;AAEAF,cAAc,CAACc,SAAf,GAA2B;AACzBR,EAAAA,IAAI,EAAEb,SAAS,CAACsB,MAAV,CAAiBC,UADE;AAEzBf,EAAAA,KAAK,EAAER,SAAS,CAACwB,KAAV,CAAgBD,UAFE;AAGzBE,EAAAA,OAAO,EAAEzB,SAAS,CAACsB,MAAV,CAAiBC,UAHD;AAIzBd,EAAAA,UAAU,EAAET,SAAS,CAACwB,KAAV,CAAgBD;AAJH,CAA3B,C,CAOA;;AACA,SAASG,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLF,IAAAA,OAAO,EAAE;AACPf,MAAAA,UAAU,EAAEN,kBAAkB,CAACF,WAAW,CAACQ,UAAb,EAAyBiB,QAAzB,CADvB;AAEPhB,MAAAA,eAAe,EAAEP,kBAAkB,CACjCD,eAAe,CAACQ,eADiB,EAEjCgB,QAFiC;AAF5B;AADJ,GAAP;AASD;;AAED,eAAe1B,OAAO,CACpBkB,eADoB,EAEpBO,kBAFoB,CAAP,CAGbnB,cAHa,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as taskActions from \"../../redux/actions/taskActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\nimport TaskForm from \"./TaskForm\";\n// import { newTask } from \"../../../tools/mockData\";\nimport newTask from \"./newTask\";\n\nfunction ManageTaskPage({\n  tasks,\n  categories,\n  fetchTasks,\n  fetchCategories,\n  ...props\n}) {\n  const [task, setTask] = useState({ ...props.task }); // set initial value to empty newTask\n\n  useState;\n\n  useEffect(() => {\n    if (tasks.length === 0) {\n      fetchTasks().catch(error => {\n        alert(\"Loading tasks failed\" + error);\n      });\n    }\n\n    if (categories.length === 0) {\n      fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [categories.length, fetchCategories, fetchTasks, tasks.length]); // empty dependency array = only run useEffect once\n\n  return (\n    <>\n      <h2>Manage Task</h2>\n    </>\n  );\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state) {\n  return {\n    task: newTask,\n    tasks: state.tasks,\n    categories: state.categories\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageTaskPage.propTypes = {\n  task: PropTypes.object.isRequired,\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  categories: PropTypes.array.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchTasks: bindActionCreators(taskActions.fetchTasks, dispatch),\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageTaskPage);\n"]},"metadata":{},"sourceType":"module"}