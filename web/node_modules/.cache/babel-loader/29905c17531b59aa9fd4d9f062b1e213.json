{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/TaskForm.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as taskActions from \"../redux/actions/taskActions\";\nimport * as categoryActions from \"../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\n\nclass TaskForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      task: {\n        title: \"\",\n        body: \"\"\n      }\n    };\n\n    this.handleTitleChange = event => {\n      const task = _objectSpread({}, this.state.task, {\n        title: event.target.value\n      });\n\n      this.setState({\n        task\n      });\n    };\n\n    this.handleBodyChange = event => {\n      const task = _objectSpread({}, this.state.task, {\n        body: event.target.value\n      });\n\n      this.setState({\n        task\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      /* run the createTask action creator and send it the task from this component's state\n      also don't need to wrap this in dispatch bc that is being handled in mapDispatchToProps below\n      */\n\n      this.props.actions.createTask(this.state.task); // clear the form after submission [may have a race condigion here!!!]\n      // this.setState({\n      //   title: \"\",\n      //   body: \"\"\n      // });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Add Task\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Title: \"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.handleTitleChange,\n      value: this.state.task.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Body :\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      onChange: this.handleBodyChange,\n      value: this.state.task.body,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), this.props.tasks.map(task => React.createElement(\"div\", {\n      key: task.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, task.title)));\n  }\n\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\n\nfunction mapStateToProps(state) {\n  return {\n    tasks: state.tasks\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nTaskForm.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.func.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchTasks: bindActionCreators(taskActions.fetchTasks, dispatch),\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/TaskForm.js"],"names":["React","Component","PropTypes","connect","taskActions","categoryActions","bindActionCreators","TaskForm","state","task","title","body","handleTitleChange","event","target","value","setState","handleBodyChange","handleSubmit","preventDefault","props","actions","createTask","render","tasks","map","mapStateToProps","propTypes","array","isRequired","func","mapDispatchToProps","dispatch","fetchTasks","fetchCategories"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as taskActions from \"../redux/actions/taskActions\";\nimport * as categoryActions from \"../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\n\nclass TaskForm extends Component {\n  // only needs to be one single task here bc we can only add one at a time\n  state = {\n    task: {\n      title: \"\",\n      body: \"\"\n    }\n  };\n\n  handleTitleChange = event => {\n    const task = {\n      ...this.state.task,\n      title: event.target.value\n    };\n    this.setState({ task });\n  };\n\n  handleBodyChange = event => {\n    const task = {\n      ...this.state.task,\n      body: event.target.value\n    };\n    this.setState({ task });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    /* run the createTask action creator and send it the task from this component's state\n    also don't need to wrap this in dispatch bc that is being handled in mapDispatchToProps below\n    */\n    this.props.actions.createTask(this.state.task);\n\n    // clear the form after submission [may have a race condigion here!!!]\n    // this.setState({\n    //   title: \"\",\n    //   body: \"\"\n    // });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Add Task</h1>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>Title: </label>\n            <br />\n            <input\n              type=\"text\"\n              onChange={this.handleTitleChange}\n              value={this.state.task.title}\n            />\n          </div>\n          <br />\n          <div>\n            <label>Body :</label>\n            <br />\n            <textarea\n              onChange={this.handleBodyChange}\n              value={this.state.task.body}\n            />\n          </div>\n          <br />\n          <button type=\"submit\">Submit</button>\n        </form>\n        <hr />\n        {this.props.tasks.map(task => (\n          <div key={task.title}>{task.title}</div>\n        ))}\n      </div>\n    );\n  }\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state) {\n  return {\n    tasks: state.tasks\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nTaskForm.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.func.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchTasks: bindActionCreators(taskActions.fetchTasks, dispatch),\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TaskForm);\n"]},"metadata":{},"sourceType":"module"}