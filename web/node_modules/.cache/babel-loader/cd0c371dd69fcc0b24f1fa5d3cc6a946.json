{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ManageChecklistPage.js\";\n// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage(_ref) {\n  let checklists = _ref.checklists,\n      history = _ref.history,\n      props = _objectWithoutProperties(_ref, [\"checklists\", \"history\"]);\n\n  const _useState = useState(_objectSpread({}, props.checklist)),\n        _useState2 = _slicedToArray(_useState, 2),\n        checklist = _useState2[0],\n        setChecklist = _useState2[1]; // initialize to empty newTask\n\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1]; // initialize to empty object\n\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        savingForm = _useState6[0],\n        setSavingForm = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        taskUpdated = _useState8[0],\n        setTaskUpdated = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        displayForm = _useState10[0],\n        setDisplayForm = _useState10[1]; // will need a variable for showing Form v. view\n\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist(_objectSpread({}, props.checklist));\n    }\n  }, [props.actions, checklists.length, props.checklist, taskUpdated]);\n\n  function handleTaskToggle(task, index) {\n    const completed = task.completed;\n    const newTasks = checklist.tasks;\n    newTasks[index].completed = !completed; // replace old array with new one\n\n    setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n      tasks: newTasks\n    }));\n    setTaskUpdated(true);\n    console.log(setTaskUpdated);\n  } // need to put saveAfterTaskToggle function inside useEffect\n\n\n  useEffect(() => {\n    if (taskUpdated === true) {\n      props.actions.saveChecklist(checklist).then(() => {\n        // console.log(checklist);\n        toast.success(\"Task updated.\");\n        setTaskUpdated(false); // fetch checklists (sorted) after save\n\n        props.actions.fetchChecklists().catch(error => {\n          alert(\"Loading checklists failed\" + error);\n        });\n      }).catch(error => {\n        setErrors({\n          onSave: error.message\n        });\n        setTaskUpdated(false);\n      });\n    }\n  }, [checklist, props.actions, taskUpdated]); // centralized change-handler (form only)\n\n  function handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // retain local ref to event\n\n    setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n      // needed to save previous changes between saves\n      [name]: value\n    }));\n  }\n\n  function formIsValid() {\n    const title = checklist.title,\n          tasks = checklist.tasks;\n    const errors = {};\n    if (!title) errors.title = \"Title is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n    setErrors(errors); // Form is valid if the errors object still has no properties\n\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSaveForm(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSavingForm(true);\n    props.actions.saveChecklist(checklist).then(() => {\n      console.log(checklist);\n      toast.success(\"Checklist saved.\"); // history is passed in from react-router from <Route>\n\n      history.push(\"/checklists\"); // redirect to '/checklists' page\n    }).catch(error => {\n      setSavingForm(false);\n      setErrors({\n        onSave: error.message\n      });\n    });\n  }\n\n  return React.createElement(React.Fragment, null, !displayForm && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, checklist.title), React.createElement(\"button\", {\n    style: {\n      marginBottom: 20\n    },\n    className: \"btn btn-primary add-task\",\n    onClick: () => setDisplayForm(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Edit Checklist\"), React.createElement(ChecklistTaskView, {\n    tasks: checklist.tasks,\n    onTaskToggle: handleTaskToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })));\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist = slug && state.checklists.length > 0 ? getChecklistBySlug(state.checklists, slug) : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    checklist,\n    checklists: state.checklists\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(checklistActions.fetchChecklists, dispatch),\n      saveChecklist: bindActionCreators(checklistActions.saveChecklist, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageChecklistPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ManageChecklistPage.js"],"names":["React","useEffect","useState","PropTypes","connect","checklistActions","ChecklistTaskView","newChecklist","bindActionCreators","toast","ManageChecklistPage","checklists","history","props","checklist","setChecklist","errors","setErrors","savingForm","setSavingForm","taskUpdated","setTaskUpdated","displayForm","setDisplayForm","length","actions","fetchChecklists","catch","error","alert","handleTaskToggle","task","index","completed","newTasks","tasks","prevChecklist","console","log","saveChecklist","then","success","onSave","message","handleChange","event","target","name","value","formIsValid","title","Object","keys","handleSaveForm","preventDefault","push","marginBottom","getChecklistBySlug","slug","find","mapStateToProps","state","ownProps","match","params","propTypes","object","isRequired","array","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\n\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage({ checklists, history, ...props }) {\n  const [checklist, setChecklist] = useState({ ...props.checklist }); // initialize to empty newTask\n  const [errors, setErrors] = useState({}); // initialize to empty object\n  const [savingForm, setSavingForm] = useState(false);\n  const [taskUpdated, setTaskUpdated] = useState(false);\n  const [displayForm, setDisplayForm] = useState(false);\n  // will need a variable for showing Form v. view\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist({ ...props.checklist });\n    }\n  }, [props.actions, checklists.length, props.checklist, taskUpdated]);\n\n  function handleTaskToggle(task, index) {\n    const { completed } = task;\n    const newTasks = checklist.tasks;\n    newTasks[index].completed = !completed;\n    // replace old array with new one\n    setChecklist(prevChecklist => ({\n      ...prevChecklist,\n      tasks: newTasks\n    }));\n    setTaskUpdated(true);\n    console.log(setTaskUpdated);\n  }\n\n  // need to put saveAfterTaskToggle function inside useEffect\n  useEffect(() => {\n    if (taskUpdated === true) {\n      props.actions\n        .saveChecklist(checklist)\n        .then(() => {\n          // console.log(checklist);\n          toast.success(\"Task updated.\");\n          setTaskUpdated(false);\n          // fetch checklists (sorted) after save\n          props.actions.fetchChecklists().catch(error => {\n            alert(\"Loading checklists failed\" + error);\n          });\n        })\n        .catch(error => {\n          setErrors({ onSave: error.message });\n          setTaskUpdated(false);\n        });\n    }\n  }, [checklist, props.actions, taskUpdated]);\n\n  // centralized change-handler (form only)\n  function handleChange(event) {\n    const { name, value } = event.target; // retain local ref to event\n    setChecklist(prevChecklist => ({\n      ...prevChecklist, // needed to save previous changes between saves\n      [name]: value\n    }));\n  }\n\n  function formIsValid() {\n    const { title, tasks } = checklist;\n    const errors = {};\n\n    if (!title) errors.title = \"Title is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n\n    setErrors(errors);\n    // Form is valid if the errors object still has no properties\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSaveForm(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSavingForm(true);\n    props.actions\n      .saveChecklist(checklist)\n      .then(() => {\n        console.log(checklist);\n        toast.success(\"Checklist saved.\");\n        // history is passed in from react-router from <Route>\n        history.push(\"/checklists\"); // redirect to '/checklists' page\n      })\n      .catch(error => {\n        setSavingForm(false);\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  return (\n    <>\n      {!displayForm && (\n        <div>\n          <h2>{checklist.title}</h2>\n\n          <button\n            style={{ marginBottom: 20 }}\n            className=\"btn btn-primary add-task\"\n            onClick={() => setDisplayForm(true)}\n          >\n            Edit Checklist\n          </button>\n\n          <ChecklistTaskView\n            tasks={checklist.tasks}\n            onTaskToggle={handleTaskToggle}\n          ></ChecklistTaskView>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist =\n    slug && state.checklists.length > 0\n      ? getChecklistBySlug(state.checklists, slug)\n      : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    checklist,\n    checklists: state.checklists\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(\n        checklistActions.fetchChecklists,\n        dispatch\n      ),\n      saveChecklist: bindActionCreators(\n        checklistActions.saveChecklist,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageChecklistPage);\n"]},"metadata":{},"sourceType":"module"}