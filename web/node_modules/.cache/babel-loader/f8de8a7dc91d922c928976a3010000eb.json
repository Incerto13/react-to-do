{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/checklists/ChecklistViewPage.js\";\n// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport ChecklistTasksView from \"./ChecklistTasksView\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\nimport { Link } from \"react-router-dom\";\n\nfunction ManageChecklistPage(_ref) {\n  let checklists = _ref.checklists,\n      categories = _ref.categories,\n      history = _ref.history,\n      props = _objectWithoutProperties(_ref, [\"checklists\", \"categories\", \"history\"]);\n\n  const _useState = useState(_objectSpread({}, props.checklist)),\n        _useState2 = _slicedToArray(_useState, 2),\n        checklist = _useState2[0],\n        setChecklist = _useState2[1]; // initialize to empty newTask\n\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1]; // initialize to empty object\n\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist(_objectSpread({}, props.checklist)); // setSortedTasks({ ...props.checklist.tasks });\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [checklist, props.actions, checklists.length, props.checklist, categories.length]);\n\n  function handleTaskToggle(event, task) {\n    const id = task.id;\n    const index = checklist.tasks.findIndex(task => {\n      return task.id === id;\n    });\n    const oldStatus = checklist.tasks[index].completed;\n    const newTasks = checklist.tasks.map(task => {\n      return _objectSpread({}, task); // deep clone of tasks array\n    });\n    newTasks[index].completed = !oldStatus;\n    setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n      tasks: newTasks\n    }));\n    props.actions // need to save updated checklist, setChecklist won't update in time\n    .saveChecklist(_objectSpread({}, checklist, {\n      tasks: newTasks\n    })).then(() => {\n      toast.success(\"Task updated.\"); // fetch again after save to allor re-sort\n\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    }).catch(error => {\n      setErrors({\n        onSave: error.message\n      });\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, checklist.title), React.createElement(Link, {\n    to: \"/checklist/\" + checklist.slug,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    style: {\n      marginBottom: 20\n    },\n    className: \"btn btn-primary add-task\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Edit Checklist\")), React.createElement(ChecklistTasksView, {\n    tasks: checklist.tasks,\n    onTaskToggle: handleTaskToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })));\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist = slug && state.checklists.length > 0 ? getChecklistBySlug(state.checklists, slug) : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(checklistActions.fetchChecklists, dispatch),\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch),\n      saveChecklist: bindActionCreators(checklistActions.saveChecklist, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageChecklistPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/checklists/ChecklistViewPage.js"],"names":["React","useEffect","useState","PropTypes","connect","checklistActions","categoryActions","ChecklistTasksView","newChecklist","bindActionCreators","toast","Link","ManageChecklistPage","checklists","categories","history","props","checklist","setChecklist","errors","setErrors","length","actions","fetchChecklists","catch","error","alert","fetchCategories","handleTaskToggle","event","task","id","index","tasks","findIndex","oldStatus","completed","newTasks","map","prevChecklist","saveChecklist","then","success","onSave","message","title","slug","marginBottom","getChecklistBySlug","find","mapStateToProps","state","ownProps","match","params","propTypes","object","isRequired","array","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\n\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport ChecklistTasksView from \"./ChecklistTasksView\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\nimport { Link } from \"react-router-dom\";\n\nfunction ManageChecklistPage({ checklists, categories, history, ...props }) {\n  const [checklist, setChecklist] = useState({ ...props.checklist }); // initialize to empty newTask\n  const [errors, setErrors] = useState({}); // initialize to empty object\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist({ ...props.checklist });\n      // setSortedTasks({ ...props.checklist.tasks });\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [\n    checklist,\n    props.actions,\n    checklists.length,\n    props.checklist,\n    categories.length\n  ]);\n\n  function handleTaskToggle(event, task) {\n    const { id } = task;\n    const index = checklist.tasks.findIndex(task => {\n      return task.id === id;\n    });\n    const oldStatus = checklist.tasks[index].completed;\n    const newTasks = checklist.tasks.map(task => {\n      return { ...task }; // deep clone of tasks array\n    });\n    newTasks[index].completed = !oldStatus;\n    setChecklist(prevChecklist => ({\n      ...prevChecklist,\n      tasks: newTasks\n    }));\n    props.actions\n      // need to save updated checklist, setChecklist won't update in time\n      .saveChecklist({ ...checklist, tasks: newTasks })\n      .then(() => {\n        toast.success(\"Task updated.\");\n        // fetch again after save to allor re-sort\n        props.actions.fetchChecklists().catch(error => {\n          alert(\"Loading checklists failed\" + error);\n        });\n      })\n      .catch(error => {\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  return (\n    <>\n      <div>\n        <h2>{checklist.title}</h2>\n\n        <Link to={\"/checklist/\" + checklist.slug}>\n          <button\n            style={{ marginBottom: 20 }}\n            className=\"btn btn-primary add-task\"\n          >\n            Edit Checklist\n          </button>\n        </Link>\n\n        <ChecklistTasksView\n          tasks={checklist.tasks}\n          onTaskToggle={handleTaskToggle}\n        />\n      </div>\n    </>\n  );\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist =\n    slug && state.checklists.length > 0\n      ? getChecklistBySlug(state.checklists, slug)\n      : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(\n        checklistActions.fetchChecklists,\n        dispatch\n      ),\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      ),\n      saveChecklist: bindActionCreators(\n        checklistActions.saveChecklist,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageChecklistPage);\n"]},"metadata":{},"sourceType":"module"}