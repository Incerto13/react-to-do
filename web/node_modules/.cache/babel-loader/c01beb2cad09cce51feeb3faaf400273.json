{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/tasks/ManageTaskPage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as taskActions from \"../../redux/actions/taskActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\nimport TaskForm from \"./TaskForm\"; // import { newTask } from \"../../../tools/mockData\";\n\nimport newTask from \"./newTask\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageTaskPage(_ref) {\n  let tasks = _ref.tasks,\n      categories = _ref.categories,\n      history = _ref.history,\n      props = _objectWithoutProperties(_ref, [\"tasks\", \"categories\", \"history\"]);\n\n  const _useState = useState(_objectSpread({}, props.task)),\n        _useState2 = _slicedToArray(_useState, 2),\n        task = _useState2[0],\n        setTask = _useState2[1]; // initialize to empty newTask\n\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1]; // initialize to empty object\n\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        saving = _useState6[0],\n        setSaving = _useState6[1];\n\n  useEffect(() => {\n    if (tasks.length === 0) {\n      props.actions.fetchTasks().catch(error => {\n        alert(\"Loading tasks failed\" + error);\n      });\n    } else {\n      //set task in local state to update when prop updates\n      setTask(_objectSpread({}, props.task));\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [props.task, categories.length, props.actions, tasks.length]); // empty dependency array = only run useEffect once\n  // centralized change-handler\n\n  function handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // retain local ref to event\n\n    setTask(prevTask => _objectSpread({}, prevTask, {\n      // needed to save previous changes between saves\n      [name]: value\n    }));\n  }\n\n  function formIsValid() {\n    const title = task.title,\n          category = task.category;\n    const errors = {};\n    if (!title) errors.title = \"Title is required.\";\n    if (!category) errors.category = \"Category is required.\";\n    console.log(\"holler\");\n    console.log(errors);\n    setErrors(errors); // Form is valid if the errors object still has no properties\n\n    return Object.keys(errors).length === 0;\n    c;\n  }\n\n  function handleSave(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSaving(true);\n    props.actions.saveTask(task).then(() => {\n      console.log(task);\n      toast.success(\"Task saved.\"); // history is passed in from react-router from <Route>\n\n      history.push(\"/tasks\"); // redirect to '/tasks' page\n    }).catch(error => {\n      setSaving(false);\n      setErrors({\n        onSave: error.message\n      });\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(TaskForm, {\n    task: task,\n    errors: errors,\n    categories: categories,\n    onChange: handleChange,\n    onSave: handleSave,\n    saving: saving,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }));\n}\n\nexport function getTaskBySlug(tasks, slug) {\n  // return the task that matches the given slug in url or return null\n  return tasks.find(task => task.slug === slug) || null;\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const task = slug && state.tasks.length > 0 ? getTaskBySlug(state.tasks, slug) : newTask;\n  return {\n    task,\n    tasks: state.tasks,\n    categories: state.categories\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageTaskPage.propTypes = {\n  task: PropTypes.object.isRequired,\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  categories: PropTypes.array.isRequired,\n  history: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchTasks: bindActionCreators(taskActions.fetchTasks, dispatch),\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch),\n      saveTask: bindActionCreators(taskActions.saveTask, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTaskPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/tasks/ManageTaskPage.js"],"names":["React","useEffect","useState","PropTypes","connect","taskActions","categoryActions","bindActionCreators","TaskForm","newTask","toast","ManageTaskPage","tasks","categories","history","props","task","setTask","errors","setErrors","saving","setSaving","length","actions","fetchTasks","catch","error","alert","fetchCategories","handleChange","event","target","name","value","prevTask","formIsValid","title","category","console","log","Object","keys","c","handleSave","preventDefault","saveTask","then","success","push","onSave","message","getTaskBySlug","slug","find","mapStateToProps","state","ownProps","match","params","propTypes","object","isRequired","array","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as taskActions from \"../../redux/actions/taskActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\nimport TaskForm from \"./TaskForm\";\n// import { newTask } from \"../../../tools/mockData\";\nimport newTask from \"./newTask\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageTaskPage({ tasks, categories, history, ...props }) {\n  const [task, setTask] = useState({ ...props.task }); // initialize to empty newTask\n  const [errors, setErrors] = useState({}); // initialize to empty object\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    if (tasks.length === 0) {\n      props.actions.fetchTasks().catch(error => {\n        alert(\"Loading tasks failed\" + error);\n      });\n    } else {\n      //set task in local state to update when prop updates\n      setTask({ ...props.task });\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [props.task, categories.length, props.actions, tasks.length]); // empty dependency array = only run useEffect once\n\n  // centralized change-handler\n  function handleChange(event) {\n    const { name, value } = event.target; // retain local ref to event\n    setTask(prevTask => ({\n      ...prevTask, // needed to save previous changes between saves\n      [name]: value\n    }));\n  }\n\n  function formIsValid() {\n    const { title, category } = task;\n    const errors = {};\n\n    if (!title) errors.title = \"Title is required.\";\n    if (!category) errors.category = \"Category is required.\";\n\n    console.log(\"holler\");\n    console.log(errors);\n    setErrors(errors);\n    // Form is valid if the errors object still has no properties\n    return Object.keys(errors).length === 0;\n    c;\n  }\n\n  function handleSave(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSaving(true);\n    props.actions\n      .saveTask(task)\n      .then(() => {\n        console.log(task);\n        toast.success(\"Task saved.\");\n        // history is passed in from react-router from <Route>\n        history.push(\"/tasks\"); // redirect to '/tasks' page\n      })\n      .catch(error => {\n        setSaving(false);\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  return (\n    <>\n      <TaskForm\n        task={task}\n        errors={errors}\n        categories={categories}\n        onChange={handleChange}\n        onSave={handleSave}\n        saving={saving}\n      />\n    </>\n  );\n}\n\nexport function getTaskBySlug(tasks, slug) {\n  // return the task that matches the given slug in url or return null\n  return tasks.find(task => task.slug === slug) || null;\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const task =\n    slug && state.tasks.length > 0 ? getTaskBySlug(state.tasks, slug) : newTask;\n\n  return {\n    task,\n    tasks: state.tasks,\n    categories: state.categories\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageTaskPage.propTypes = {\n  task: PropTypes.object.isRequired,\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  categories: PropTypes.array.isRequired,\n  history: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchTasks: bindActionCreators(taskActions.fetchTasks, dispatch),\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      ),\n      saveTask: bindActionCreators(taskActions.saveTask, dispatch)\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageTaskPage);\n"]},"metadata":{},"sourceType":"module"}