{"ast":null,"code":"var _jsxFileName = \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/TaskList.js\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { fetchTasks } from \"../redux/actions/taskActions\";\nimport * as taskActions from \"../redux/actions/taskActions\";\nimport { bindActionCreators } from \"redux\";\n\nconst TaskList = props => {\n  useEffect(() => {\n    props.actions.fetchTasks().catch(error => {\n      alert(\"Loading tasks failed\" + error);\n    });\n  }, [props.actions]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Tasks\"), props.tasks.map(task => React.createElement(\"div\", {\n    key: task.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, task.title)));\n}; // which parts of the state (DEPARTMENTS) to expose this component via props\n\n\nfunction mapStateToProps(state) {\n  return {\n    tasks: state.tasks\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nTaskList.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.func.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(taskActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/TaskList.js"],"names":["React","useEffect","connect","PropTypes","fetchTasks","taskActions","bindActionCreators","TaskList","props","actions","catch","error","alert","tasks","map","task","title","mapStateToProps","state","propTypes","array","isRequired","func","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,OAAO,KAAKC,WAAZ,MAA6B,8BAA7B;AACA,SAASC,kBAAT,QAAmC,OAAnC;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxBP,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,KAAK,CAACC,OAAN,CAAcL,UAAd,GAA2BM,KAA3B,CAAiCC,KAAK,IAAI;AACxCC,MAAAA,KAAK,CAAC,yBAAyBD,KAA1B,CAAL;AACD,KAFD;AAGD,GAJQ,EAIN,CAACH,KAAK,CAACC,OAAP,CAJM,CAAT;AAMA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEGD,KAAK,CAACK,KAAN,CAAYC,GAAZ,CAAgBC,IAAI,IACnB;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBD,IAAI,CAACC,KAA5B,CADD,CAFH,CADF;AAQD,CAfD,C,CAiBA;;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLL,IAAAA,KAAK,EAAEK,KAAK,CAACL;AADR,GAAP;AAGD;AAED;;;;AAEAN,QAAQ,CAACY,SAAT,GAAqB;AACnBN,EAAAA,KAAK,EAAEV,SAAS,CAACiB,KAAV,CAAgBC,UADJ;AAEnBZ,EAAAA,OAAO,EAAEN,SAAS,CAACmB,IAAV,CAAeD;AAFL,CAArB,C,CAKA;;AACA,SAASE,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLf,IAAAA,OAAO,EAAEH,kBAAkB,CAACD,WAAD,EAAcmB,QAAd;AADtB,GAAP;AAGD;;AAED,eAAetB,OAAO,CACpBe,eADoB,EAEpBM,kBAFoB,CAAP,CAGbhB,QAHa,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { fetchTasks } from \"../redux/actions/taskActions\";\nimport * as taskActions from \"../redux/actions/taskActions\";\nimport { bindActionCreators } from \"redux\";\n\nconst TaskList = props => {\n  useEffect(() => {\n    props.actions.fetchTasks().catch(error => {\n      alert(\"Loading tasks failed\" + error);\n    });\n  }, [props.actions]);\n\n  return (\n    <div>\n      <h2>Tasks</h2>\n      {props.tasks.map(task => (\n        <div key={task.title}>{task.title}</div>\n      ))}\n    </div>\n  );\n};\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state) {\n  return {\n    tasks: state.tasks\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nTaskList.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.func.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(taskActions, dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TaskList);\n"]},"metadata":{},"sourceType":"module"}