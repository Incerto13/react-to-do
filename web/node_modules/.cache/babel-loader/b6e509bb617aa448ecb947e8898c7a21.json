{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ManageChecklistPage.js\";\n// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage(_ref) {\n  let checklists = _ref.checklists,\n      history = _ref.history,\n      props = _objectWithoutProperties(_ref, [\"checklists\", \"history\"]);\n\n  const _useState = useState(_objectSpread({}, props.checklist)),\n        _useState2 = _slicedToArray(_useState, 2),\n        checklist = _useState2[0],\n        setChecklist = _useState2[1]; // initialize to empty newTask\n\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1]; // initialize to empty object\n\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        saving = _useState6[0],\n        setSaving = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        taskUpdated = _useState8[0],\n        setTaskUpdated = _useState8[1];\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist(_objectSpread({}, props.checklist));\n    }\n\n    if (taskUpdated === true) {\n      saveTaskToggle();\n    }\n  }, [props.actions, checklists.length, props.checklist, taskUpdated]); // SHOULD BE ABLE TO DELETE!!!!\n  // ************************************\n  // // centralized change-handler\n  // function handleChange(event) {\n  //   const { name, value } = event.target; // retain local ref to event\n  //   setTask(prevTask => ({\n  //     ...prevTask, // needed to save previous changes between saves\n  //     [name]: value\n  //   }));\n  // }\n\n  function formIsValid() {\n    const title = checklist.title,\n          tasks = checklist.tasks;\n    const errors = {};\n    if (!title) errors.title = \"Title is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n    setErrors(errors); // Form is valid if the errors object still has no properties\n\n    return Object.keys(errors).length === 0;\n  } // // find index for this task within tasks array\n  // const idx = checklist.tasks.findIndex(task => {\n  //   return id === task.id;\n  // });\n  // checklist.tasks[idx].completed = !checklist.tasks[idx].completed;\n\n\n  function handleTaskToggle(task, index, oldStatus) {\n    const newStatus = !oldStatus; // console.log(task);\n    // toggle the 'completed' boolean variable\n\n    const newTasks = checklist.tasks;\n    newTasks[index].completed = false;\n    console.log(newTasks[index].completed); // replace old array with new one\n\n    setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n      tasks: newTasks\n    }), () => {\n      setTaskUpdated(true);\n    });\n  }\n\n  useEffect(() => {\n    props.actions.saveChecklist(checklist).then(() => {\n      // console.log(checklist);\n      toast.success(\"Task updated.\");\n      setTaskUpdated(false);\n    }).catch(error => {\n      setErrors({\n        onSave: error.message\n      });\n    });\n  });\n\n  function handleSave(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSaving(true);\n    props.actions.saveChecklist(checklist).then(() => {\n      console.log(checklist);\n      toast.success(\"Task updated.\"); // history is passed in from react-router from <Route>\n      // history.push(\"/tasks\"); // redirect to '/tasks' page\n    }).catch(error => {\n      setSaving(false);\n      setErrors({\n        onSave: error.message\n      });\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, checklist.title), React.createElement(\"button\", {\n    style: {\n      marginBottom: 20\n    },\n    className: \"btn btn-primary add-task\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Edit Checklist\"), React.createElement(ChecklistTaskView, {\n    tasks: checklist.tasks,\n    onTaskToggle: handleTaskToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }));\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist = slug && state.checklists.length > 0 ? getChecklistBySlug(state.checklists, slug) : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    checklist,\n    checklists: state.checklists\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(checklistActions.fetchChecklists, dispatch),\n      saveChecklist: bindActionCreators(checklistActions.saveChecklist, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageChecklistPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ManageChecklistPage.js"],"names":["React","useEffect","useState","PropTypes","connect","checklistActions","ChecklistTaskView","newChecklist","bindActionCreators","toast","ManageChecklistPage","checklists","history","props","checklist","setChecklist","errors","setErrors","saving","setSaving","taskUpdated","setTaskUpdated","length","actions","fetchChecklists","catch","error","alert","saveTaskToggle","formIsValid","title","tasks","Object","keys","handleTaskToggle","task","index","oldStatus","newStatus","newTasks","completed","console","log","prevChecklist","saveChecklist","then","success","onSave","message","handleSave","event","preventDefault","marginBottom","getChecklistBySlug","slug","find","mapStateToProps","state","ownProps","match","params","propTypes","object","isRequired","array","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\n\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage({ checklists, history, ...props }) {\n  const [checklist, setChecklist] = useState({ ...props.checklist }); // initialize to empty newTask\n  const [errors, setErrors] = useState({}); // initialize to empty object\n  const [saving, setSaving] = useState(false);\n  const [taskUpdated, setTaskUpdated] = useState(false);\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist({ ...props.checklist });\n    }\n\n    if (taskUpdated === true) {\n      saveTaskToggle();\n    }\n  }, [props.actions, checklists.length, props.checklist, taskUpdated]);\n\n  // SHOULD BE ABLE TO DELETE!!!!\n  // ************************************\n  // // centralized change-handler\n  // function handleChange(event) {\n  //   const { name, value } = event.target; // retain local ref to event\n  //   setTask(prevTask => ({\n  //     ...prevTask, // needed to save previous changes between saves\n  //     [name]: value\n  //   }));\n  // }\n\n  function formIsValid() {\n    const { title, tasks } = checklist;\n    const errors = {};\n\n    if (!title) errors.title = \"Title is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n\n    setErrors(errors);\n    // Form is valid if the errors object still has no properties\n    return Object.keys(errors).length === 0;\n  }\n\n  // // find index for this task within tasks array\n  // const idx = checklist.tasks.findIndex(task => {\n  //   return id === task.id;\n  // });\n  // checklist.tasks[idx].completed = !checklist.tasks[idx].completed;\n\n  function handleTaskToggle(task, index, oldStatus) {\n    const newStatus = !oldStatus;\n    // console.log(task);\n\n    // toggle the 'completed' boolean variable\n    const newTasks = checklist.tasks;\n    newTasks[index].completed = false;\n    console.log(newTasks[index].completed);\n    // replace old array with new one\n    setChecklist(\n      prevChecklist => ({\n        ...prevChecklist,\n        tasks: newTasks\n      }),\n      () => {\n        setTaskUpdated(true);\n      }\n    );\n  }\n\n  useEffect(() => {\n    props.actions\n      .saveChecklist(checklist)\n      .then(() => {\n        // console.log(checklist);\n        toast.success(\"Task updated.\");\n        setTaskUpdated(false);\n      })\n      .catch(error => {\n        setErrors({ onSave: error.message });\n      });\n  });\n\n  function handleSave(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSaving(true);\n    props.actions\n      .saveChecklist(checklist)\n      .then(() => {\n        console.log(checklist);\n        toast.success(\"Task updated.\");\n        // history is passed in from react-router from <Route>\n        // history.push(\"/tasks\"); // redirect to '/tasks' page\n      })\n      .catch(error => {\n        setSaving(false);\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  return (\n    <>\n      <h2>{checklist.title}</h2>\n\n      <button style={{ marginBottom: 20 }} className=\"btn btn-primary add-task\">\n        Edit Checklist\n      </button>\n\n      <ChecklistTaskView\n        tasks={checklist.tasks}\n        onTaskToggle={handleTaskToggle}\n      ></ChecklistTaskView>\n    </>\n  );\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist =\n    slug && state.checklists.length > 0\n      ? getChecklistBySlug(state.checklists, slug)\n      : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    checklist,\n    checklists: state.checklists\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(\n        checklistActions.fetchChecklists,\n        dispatch\n      ),\n      saveChecklist: bindActionCreators(\n        checklistActions.saveChecklist,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageChecklistPage);\n"]},"metadata":{},"sourceType":"module"}