{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/checklists/ManageChecklistPage.js\";\n// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport ChecklistForm from \"./ChecklistForm\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage(_ref) {\n  let checklists = _ref.checklists,\n      categories = _ref.categories,\n      history = _ref.history,\n      props = _objectWithoutProperties(_ref, [\"checklists\", \"categories\", \"history\"]);\n\n  const _useState = useState(_objectSpread({}, props.checklist)),\n        _useState2 = _slicedToArray(_useState, 2),\n        checklist = _useState2[0],\n        setChecklist = _useState2[1]; // initialize to empty newTask\n\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1]; // initialize to empty object\n\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        saving = _useState6[0],\n        setSaving = _useState6[1];\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist(_objectSpread({}, props.checklist));\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [checklist, props.actions, checklists.length, props.checklist, categories.length]); // centralized change-handler\n\n  function handleChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // retain local ref to event\n\n    setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n      // needed to save previous changes between saves\n      [name]: value\n    }));\n  }\n\n  function formIsValid() {\n    const title = checklist.title,\n          tasks = checklist.tasks;\n    const categories = checklist.tasks.filter(task => {\n      return task.category;\n    });\n    const errors = {};\n    if (!title) errors.title = \"Title is required.\";\n    if (categories.length !== tasks.length) errors.category = \"Category is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n    setErrors(errors); // Form is valid if the errors object still has no properties\n\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSave(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    toast.success(\"Checklist saved.\");\n    setSaving(true); // **** DEBUGGING\n\n    console.log(\"saved: \", saved);\n    console.log(\"saving: \", saving); // window.location.reload();\n\n    props.actions.saveChecklist(checklist).then(() => {\n      console.log(checklist);\n      setSaving(false);\n      setSaved(true); // history is passed in from react-router from <Route>\n\n      if (displayForm) {\n        history.push(\"/checklists\"); // redirect to '/checklists' page\n      }\n    }).catch(error => {\n      setSaving(false);\n      setErrors({\n        onSave: error.message\n      });\n    });\n  }\n\n  return React.createElement(React.Fragment, null, !displayForm && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, checklist.title), React.createElement(\"button\", {\n    style: {\n      marginBottom: 20\n    },\n    className: \"btn btn-primary add-task\",\n    onClick: () => setDisplayForm(true),\n    disabled: !saved,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Edit Checklist\"), React.createElement(ChecklistTaskView, {\n    tasks: checklist.tasks,\n    onTaskToggle: handleTaskToggle,\n    onSave: handleSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })), displayForm && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(ChecklistForm, {\n    checklist: checklist,\n    errors: errors,\n    categories: categories,\n    onChange: handleChange,\n    onSave: handleSave,\n    saving: saving,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })));\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist = slug && state.checklists.length > 0 ? getChecklistBySlug(state.checklists, slug) : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(checklistActions.fetchChecklists, dispatch),\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch),\n      saveChecklist: bindActionCreators(checklistActions.saveChecklist, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageChecklistPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/checklists/ManageChecklistPage.js"],"names":["React","useEffect","useState","PropTypes","connect","checklistActions","categoryActions","ChecklistForm","bindActionCreators","toast","ManageChecklistPage","checklists","categories","history","props","checklist","setChecklist","errors","setErrors","saving","setSaving","length","actions","fetchChecklists","catch","error","alert","fetchCategories","handleChange","event","target","name","value","prevChecklist","formIsValid","title","tasks","filter","task","category","Object","keys","handleSave","preventDefault","success","console","log","saved","saveChecklist","then","setSaved","displayForm","push","onSave","message","marginBottom","setDisplayForm","handleTaskToggle","getChecklistBySlug","slug","find","mapStateToProps","state","ownProps","match","params","newChecklist","propTypes","object","isRequired","array","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\n\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport ChecklistForm from \"./ChecklistForm\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage({ checklists, categories, history, ...props }) {\n  const [checklist, setChecklist] = useState({ ...props.checklist }); // initialize to empty newTask\n  const [errors, setErrors] = useState({}); // initialize to empty object\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist({ ...props.checklist });\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [\n    checklist,\n    props.actions,\n    checklists.length,\n    props.checklist,\n    categories.length\n  ]);\n\n  // centralized change-handler\n  function handleChange(event) {\n    const { name, value } = event.target; // retain local ref to event\n    setChecklist(prevChecklist => ({\n      ...prevChecklist, // needed to save previous changes between saves\n      [name]: value\n    }));\n  }\n\n  function formIsValid() {\n    const { title, tasks } = checklist;\n    const categories = checklist.tasks.filter(task => {\n      return task.category;\n    });\n    const errors = {};\n\n    if (!title) errors.title = \"Title is required.\";\n    if (categories.length !== tasks.length)\n      errors.category = \"Category is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n\n    setErrors(errors);\n    // Form is valid if the errors object still has no properties\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSave(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    toast.success(\"Checklist saved.\");\n    setSaving(true);\n    // **** DEBUGGING\n    console.log(\"saved: \", saved);\n    console.log(\"saving: \", saving);\n    // window.location.reload();\n    props.actions\n      .saveChecklist(checklist)\n      .then(() => {\n        console.log(checklist);\n\n        setSaving(false);\n        setSaved(true);\n        // history is passed in from react-router from <Route>\n        if (displayForm) {\n          history.push(\"/checklists\"); // redirect to '/checklists' page\n        }\n      })\n      .catch(error => {\n        setSaving(false);\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  return (\n    <>\n      {!displayForm && (\n        <div>\n          <h2>{checklist.title}</h2>\n\n          <button\n            style={{ marginBottom: 20 }}\n            className=\"btn btn-primary add-task\"\n            onClick={() => setDisplayForm(true)}\n            disabled={!saved}\n          >\n            Edit Checklist\n          </button>\n\n          <ChecklistTaskView\n            tasks={checklist.tasks}\n            onTaskToggle={handleTaskToggle}\n            onSave={handleSave}\n          />\n        </div>\n      )}\n\n      {displayForm && (\n        <div>\n          <ChecklistForm\n            checklist={checklist}\n            errors={errors}\n            categories={categories}\n            onChange={handleChange}\n            onSave={handleSave}\n            saving={saving}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist =\n    slug && state.checklists.length > 0\n      ? getChecklistBySlug(state.checklists, slug)\n      : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(\n        checklistActions.fetchChecklists,\n        dispatch\n      ),\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      ),\n      saveChecklist: bindActionCreators(\n        checklistActions.saveChecklist,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageChecklistPage);\n"]},"metadata":{},"sourceType":"module"}