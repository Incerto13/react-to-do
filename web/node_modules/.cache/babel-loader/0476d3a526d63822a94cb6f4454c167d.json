{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/tasks/TasksPage.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as taskActions from \"../../redux/actions/taskActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\nimport TaskList from \"./TaskList\";\nimport { toast } from \"react-toastify\";\n\nclass TasksPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleDeleteTask = task => {\n      toast.success(\"Task deleted.\"); // optimistic delete ~ remove task from UI before API call completes\n\n      this.props.actions.deleteTask(task);\n    };\n  }\n\n  componentDidMount() {\n    this.props.actions.fetchTasks().catch(error => {\n      alert(\"Loading tasks failed\" + error);\n    });\n    this.props.actions.fetchCategories().catch(error => {\n      alert(\"Loading categories failed\" + error);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"Tasks\"), React.createElement(\"button\", {\n      style: {\n        marginBottom: 20\n      },\n      className: \"btn btn-primary add-task\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }), React.createElement(TaskList, {\n      onDeleteClick: this.handleDeleteTask,\n      tasks: this.props.tasks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }));\n  }\n\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\n\nfunction mapStateToProps(state) {\n  return {\n    tasks: state.categories.length === 0 // make sure categories were loaded\n    ? [] : state.tasks.map(task => {\n      return _objectSpread({}, task, {\n        category: state.categories.find(category => category === task.category)\n      });\n    }),\n    categories: state.categories\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nTasksPage.propTypes = {\n  categories: PropTypes.array.isRequired,\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchTasks: bindActionCreators(taskActions.fetchTasks, dispatch),\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch),\n      deleteTask: bindActionCreators(taskActions.deleteTask, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/tasks/TasksPage.js"],"names":["React","Component","PropTypes","connect","taskActions","categoryActions","bindActionCreators","TaskList","toast","TasksPage","handleDeleteTask","task","success","props","actions","deleteTask","componentDidMount","fetchTasks","catch","error","alert","fetchCategories","render","marginBottom","tasks","mapStateToProps","state","categories","length","map","category","find","propTypes","array","isRequired","object","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as taskActions from \"../../redux/actions/taskActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\nimport TaskList from \"./TaskList\";\nimport { toast } from \"react-toastify\";\n\nclass TasksPage extends Component {\n  componentDidMount() {\n    this.props.actions.fetchTasks().catch(error => {\n      alert(\"Loading tasks failed\" + error);\n    });\n\n    this.props.actions.fetchCategories().catch(error => {\n      alert(\"Loading categories failed\" + error);\n    });\n  }\n\n  handleDeleteTask = task => {\n    toast.success(\"Task deleted.\");\n    // optimistic delete ~ remove task from UI before API call completes\n    this.props.actions.deleteTask(task);\n  };\n\n  render() {\n    return (\n      <>\n        <h2>Tasks</h2>\n\n        <button\n          style={{ marginBottom: 20 }}\n          className=\"btn btn-primary add-task\"\n        ></button>\n\n        <TaskList\n          onDeleteClick={this.handleDeleteTask}\n          tasks={this.props.tasks}\n        ></TaskList>\n      </>\n    );\n  }\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state) {\n  return {\n    tasks:\n      state.categories.length === 0 // make sure categories were loaded\n        ? []\n        : state.tasks.map(task => {\n            return {\n              ...task,\n              category: state.categories.find(\n                category => category === task.category\n              )\n            };\n          }),\n    categories: state.categories\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nTasksPage.propTypes = {\n  categories: PropTypes.array.isRequired,\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchTasks: bindActionCreators(taskActions.fetchTasks, dispatch),\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      ),\n      deleteTask: bindActionCreators(taskActions.deleteTask, dispatch)\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TasksPage);\n"]},"metadata":{},"sourceType":"module"}