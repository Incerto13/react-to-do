{"ast":null,"code":"import * as types from \"./actionTypes\";\nimport * as checklistApi from \"../../api/checklistApi\"; // These are ACTION CREATORS for the checklist reducer (department) of the store\n\nfunction sortChecklistTasks(checklists) {} // returns entire array of checklists\n\n\nexport function fetchChecklists() {\n  return function (dispatch) {\n    return checklistApi.getChecklists().then(checklists => {\n      // only call dispatch once you know it was a successfull api call\n      dispatch({\n        type: types.FETCH_CHECKLISTS_SUCCESS,\n        checklists: checklists\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\n/* this method creates one of two potential actions on a conditional basis\n either update or create depending on if there's already an id\n*/\n\nexport function saveChecklist(checklist) {\n  return function (dispatch, getState) {\n    return checklistApi.saveChecklist(checklist).then(savedChecklist => {\n      checklist.id ? dispatch({\n        type: types.UPDATE_CHECKLIST_SUCCESS,\n        checklist: savedChecklist\n      }) : dispatch({\n        type: types.CREATE_CHECKLIST_SUCCESS,\n        checklist: savedChecklist\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport function deleteChecklist(checklist) {\n  return function (dispatch) {\n    // Doing optimistic delete, so not dispatching begin/end api call\n    // actions, or apiCallError action since we're not showing the loading status for this.\n    dispatch({\n      type: types.DELETE_CHECKLIST_OPTIMISTIC,\n      checklist\n    });\n    return checklistApi.deleteChecklist(checklist.id);\n  };\n}","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do/src/redux/actions/checklistActions.js"],"names":["types","checklistApi","sortChecklistTasks","checklists","fetchChecklists","dispatch","getChecklists","then","type","FETCH_CHECKLISTS_SUCCESS","catch","error","saveChecklist","checklist","getState","savedChecklist","id","UPDATE_CHECKLIST_SUCCESS","CREATE_CHECKLIST_SUCCESS","deleteChecklist","DELETE_CHECKLIST_OPTIMISTIC"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;AACA,OAAO,KAAKC,YAAZ,MAA8B,wBAA9B,C,CAEA;;AAEA,SAASC,kBAAT,CAA4BC,UAA5B,EAAwC,CAAE,C,CAE1C;;;AACA,OAAO,SAASC,eAAT,GAA2B;AAChC,SAAO,UAASC,QAAT,EAAmB;AACxB,WAAOJ,YAAY,CAChBK,aADI,GAEJC,IAFI,CAECJ,UAAU,IAAI;AAClB;AACAE,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAER,KAAK,CAACS,wBADL;AAEPN,QAAAA,UAAU,EAAEA;AAFL,OAAD,CAAR;AAID,KARI,EASJO,KATI,CASEC,KAAK,IAAI;AACd,YAAMA,KAAN;AACD,KAXI,CAAP;AAYD,GAbD;AAcD;AAED;;;;AAGA,OAAO,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;AACvC,SAAO,UAASR,QAAT,EAAmBS,QAAnB,EAA6B;AAClC,WAAOb,YAAY,CAChBW,aADI,CACUC,SADV,EAEJN,IAFI,CAECQ,cAAc,IAAI;AACtBF,MAAAA,SAAS,CAACG,EAAV,GACIX,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAER,KAAK,CAACiB,wBADL;AAEPJ,QAAAA,SAAS,EAAEE;AAFJ,OAAD,CADZ,GAKIV,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAER,KAAK,CAACkB,wBADL;AAEPL,QAAAA,SAAS,EAAEE;AAFJ,OAAD,CALZ;AASD,KAZI,EAaJL,KAbI,CAaEC,KAAK,IAAI;AACd,YAAMA,KAAN;AACD,KAfI,CAAP;AAgBD,GAjBD;AAkBD;AAED,OAAO,SAASQ,eAAT,CAAyBN,SAAzB,EAAoC;AACzC,SAAO,UAASR,QAAT,EAAmB;AACxB;AACA;AACAA,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAER,KAAK,CAACoB,2BAAd;AAA2CP,MAAAA;AAA3C,KAAD,CAAR;AACA,WAAOZ,YAAY,CAACkB,eAAb,CAA6BN,SAAS,CAACG,EAAvC,CAAP;AACD,GALD;AAMD","sourcesContent":["import * as types from \"./actionTypes\";\nimport * as checklistApi from \"../../api/checklistApi\";\n\n// These are ACTION CREATORS for the checklist reducer (department) of the store\n\nfunction sortChecklistTasks(checklists) {}\n\n// returns entire array of checklists\nexport function fetchChecklists() {\n  return function(dispatch) {\n    return checklistApi\n      .getChecklists()\n      .then(checklists => {\n        // only call dispatch once you know it was a successfull api call\n        dispatch({\n          type: types.FETCH_CHECKLISTS_SUCCESS,\n          checklists: checklists\n        });\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n}\n\n/* this method creates one of two potential actions on a conditional basis\n either update or create depending on if there's already an id\n*/\nexport function saveChecklist(checklist) {\n  return function(dispatch, getState) {\n    return checklistApi\n      .saveChecklist(checklist)\n      .then(savedChecklist => {\n        checklist.id\n          ? dispatch({\n              type: types.UPDATE_CHECKLIST_SUCCESS,\n              checklist: savedChecklist\n            })\n          : dispatch({\n              type: types.CREATE_CHECKLIST_SUCCESS,\n              checklist: savedChecklist\n            });\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n}\n\nexport function deleteChecklist(checklist) {\n  return function(dispatch) {\n    // Doing optimistic delete, so not dispatching begin/end api call\n    // actions, or apiCallError action since we're not showing the loading status for this.\n    dispatch({ type: types.DELETE_CHECKLIST_OPTIMISTIC, checklist });\n    return checklistApi.deleteChecklist(checklist.id);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}