{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ManageChecklistPage.js\";\n// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage(_ref) {\n  let checklists = _ref.checklists,\n      history = _ref.history,\n      props = _objectWithoutProperties(_ref, [\"checklists\", \"history\"]);\n\n  const _useState = useState(_objectSpread({}, props.checklist)),\n        _useState2 = _slicedToArray(_useState, 2),\n        checklist = _useState2[0],\n        setChecklist = _useState2[1]; // initialize to empty newTask\n\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1]; // initialize to empty object\n\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        saving = _useState6[0],\n        setSaving = _useState6[1];\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist(_objectSpread({}, props.checklist));\n    }\n  }, [props.actions, checklists.length, props.checklist]); // SHOULD BE ABLE TO DELETE!!!!\n  // ************************************\n  // // centralized change-handler\n  // function handleChange(event) {\n  //   const { name, value } = event.target; // retain local ref to event\n  //   setTask(prevTask => ({\n  //     ...prevTask, // needed to save previous changes between saves\n  //     [name]: value\n  //   }));\n  // }\n\n  function formIsValid() {\n    const title = checklist.title,\n          tasks = checklist.tasks;\n    const errors = {};\n    if (!title) errors.title = \"Title is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n    setErrors(errors); // Form is valid if the errors object still has no properties\n\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleTaskToggle(task) {\n    setSaving(true);\n    const id = task.id;\n    const idx = checklist.tasks.findIndex(task => {\n      return id === task.id;\n    }); // toggle the completed variable\n\n    checklist.tasks[idx].completed = !checklist.tasks[idx].completed;\n    props.actions.saveChecklist(checklist).then(() => {\n      console.log(checklist);\n      toast.success(\"Task updated.\");\n    }).catch(error => {\n      setSaving(false);\n      setErrors({\n        onSave: error.message\n      });\n    });\n  } // function handleSave(event) {\n  //   event.preventDefault();\n  //   if (!formIsValid()) return;\n  //   setSaving(true);\n  //   props.actions\n  //     .saveTask(task)\n  //     .then(() => {\n  //       console.log(task);\n  //       toast.success(\"Task saved.\");\n  //       // history is passed in from react-router from <Route>\n  //       history.push(\"/tasks\"); // redirect to '/tasks' page\n  //     })\n  //     .catch(error => {\n  //       setSaving(false);\n  //       setErrors({ onSave: error.message });\n  //     });\n  // }\n\n\n  return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, checklist.title), React.createElement(\"button\", {\n    style: {\n      marginBottom: 20\n    },\n    className: \"btn btn-primary add-task\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Edit Checklist\"), React.createElement(ChecklistTaskView, {\n    tasks: checklist.tasks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }));\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist = slug && state.checklists.length > 0 ? getChecklistBySlug(state.checklists, slug) : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    checklist,\n    checklists: state.checklists\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(checklistActions.fetchChecklists, dispatch),\n      saveChecklist: bindActionCreators(checklistActions.saveChecklist, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageChecklistPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ManageChecklistPage.js"],"names":["React","useEffect","useState","PropTypes","connect","checklistActions","ChecklistTaskView","newChecklist","bindActionCreators","toast","ManageChecklistPage","checklists","history","props","checklist","setChecklist","errors","setErrors","saving","setSaving","length","actions","fetchChecklists","catch","error","alert","formIsValid","title","tasks","Object","keys","handleTaskToggle","task","id","idx","findIndex","completed","saveChecklist","then","console","log","success","onSave","message","marginBottom","getChecklistBySlug","slug","find","mapStateToProps","state","ownProps","match","params","propTypes","object","isRequired","array","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\n\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage({ checklists, history, ...props }) {\n  const [checklist, setChecklist] = useState({ ...props.checklist }); // initialize to empty newTask\n  const [errors, setErrors] = useState({}); // initialize to empty object\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist({ ...props.checklist });\n    }\n  }, [props.actions, checklists.length, props.checklist]);\n\n  // SHOULD BE ABLE TO DELETE!!!!\n  // ************************************\n  // // centralized change-handler\n  // function handleChange(event) {\n  //   const { name, value } = event.target; // retain local ref to event\n  //   setTask(prevTask => ({\n  //     ...prevTask, // needed to save previous changes between saves\n  //     [name]: value\n  //   }));\n  // }\n\n  function formIsValid() {\n    const { title, tasks } = checklist;\n    const errors = {};\n\n    if (!title) errors.title = \"Title is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n\n    setErrors(errors);\n    // Form is valid if the errors object still has no properties\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleTaskToggle(task) {\n    setSaving(true);\n    const { id } = task;\n    const idx = checklist.tasks.findIndex(task => {\n      return id === task.id;\n    });\n    // toggle the completed variable\n    checklist.tasks[idx].completed = !checklist.tasks[idx].completed;\n    props.actions\n      .saveChecklist(checklist)\n      .then(() => {\n        console.log(checklist);\n        toast.success(\"Task updated.\");\n      })\n      .catch(error => {\n        setSaving(false);\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  // function handleSave(event) {\n  //   event.preventDefault();\n  //   if (!formIsValid()) return;\n  //   setSaving(true);\n  //   props.actions\n  //     .saveTask(task)\n  //     .then(() => {\n  //       console.log(task);\n  //       toast.success(\"Task saved.\");\n  //       // history is passed in from react-router from <Route>\n  //       history.push(\"/tasks\"); // redirect to '/tasks' page\n  //     })\n  //     .catch(error => {\n  //       setSaving(false);\n  //       setErrors({ onSave: error.message });\n  //     });\n  // }\n\n  return (\n    <>\n      <h2>{checklist.title}</h2>\n\n      <button style={{ marginBottom: 20 }} className=\"btn btn-primary add-task\">\n        Edit Checklist\n      </button>\n\n      <ChecklistTaskView tasks={checklist.tasks}></ChecklistTaskView>\n    </>\n  );\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist =\n    slug && state.checklists.length > 0\n      ? getChecklistBySlug(state.checklists, slug)\n      : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    checklist,\n    checklists: state.checklists\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(\n        checklistActions.fetchChecklists,\n        dispatch\n      ),\n      saveChecklist: bindActionCreators(\n        checklistActions.saveChecklist,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageChecklistPage);\n"]},"metadata":{},"sourceType":"module"}