{"ast":null,"code":"var _jsxFileName = \"/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/tasks/ManageTaskPage.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as taskActions from \"../../redux/actions/taskActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\n\nclass ManageTaskPage extends Component {\n  componentDidMount() {\n    this.props.actions.fetchTasks().catch(error => {\n      alert(\"Loading tasks failed\" + error);\n    });\n    this.props.actions.fetchCategories().catch(error => {\n      alert(\"Loading categories failed\" + error);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Manage Task\"));\n  }\n\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\n\nfunction mapStateToProps(state) {\n  return {\n    tasks: state.tasks,\n    categories: state.categories\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageTaskPage.propTypes = {\n  categories: PropTypes.array.isRequired,\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.func.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchTasks: bindActionCreators(taskActions.fetchTasks, dispatch),\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTaskPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/tasks/ManageTaskPage.js"],"names":["React","Component","PropTypes","connect","taskActions","categoryActions","bindActionCreators","ManageTaskPage","componentDidMount","props","actions","fetchTasks","catch","error","alert","fetchCategories","render","mapStateToProps","state","tasks","categories","propTypes","array","isRequired","func","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,WAAZ,MAA6B,iCAA7B;AACA,OAAO,KAAKC,eAAZ,MAAiC,qCAAjC;AACA,SAASC,kBAAT,QAAmC,OAAnC;;AAEA,MAAMC,cAAN,SAA6BN,SAA7B,CAAuC;AACrCO,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWC,OAAX,CAAmBC,UAAnB,GAAgCC,KAAhC,CAAsCC,KAAK,IAAI;AAC7CC,MAAAA,KAAK,CAAC,yBAAyBD,KAA1B,CAAL;AACD,KAFD;AAIA,SAAKJ,KAAL,CAAWC,OAAX,CAAmBK,eAAnB,GAAqCH,KAArC,CAA2CC,KAAK,IAAI;AAClDC,MAAAA,KAAK,CAAC,8BAA8BD,KAA/B,CAAL;AACD,KAFD;AAGD;;AAEDG,EAAAA,MAAM,GAAG;AACP,WACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CADF;AAKD;;AAjBoC,C,CAoBvC;;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLC,IAAAA,KAAK,EAAED,KAAK,CAACC,KADR;AAELC,IAAAA,UAAU,EAAEF,KAAK,CAACE;AAFb,GAAP;AAID;AAED;;;;AAEAb,cAAc,CAACc,SAAf,GAA2B;AACzBD,EAAAA,UAAU,EAAElB,SAAS,CAACoB,KAAV,CAAgBC,UADH;AAEzBJ,EAAAA,KAAK,EAAEjB,SAAS,CAACoB,KAAV,CAAgBC,UAFE;AAGzBb,EAAAA,OAAO,EAAER,SAAS,CAACsB,IAAV,CAAeD;AAHC,CAA3B,C,CAMA;;AACA,SAASE,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLhB,IAAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAEL,kBAAkB,CAACF,WAAW,CAACO,UAAb,EAAyBe,QAAzB,CADvB;AAEPX,MAAAA,eAAe,EAAET,kBAAkB,CACjCD,eAAe,CAACU,eADiB,EAEjCW,QAFiC;AAF5B;AADJ,GAAP;AASD;;AAED,eAAevB,OAAO,CACpBc,eADoB,EAEpBQ,kBAFoB,CAAP,CAGblB,cAHa,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as taskActions from \"../../redux/actions/taskActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\n\nclass ManageTaskPage extends Component {\n  componentDidMount() {\n    this.props.actions.fetchTasks().catch(error => {\n      alert(\"Loading tasks failed\" + error);\n    });\n\n    this.props.actions.fetchCategories().catch(error => {\n      alert(\"Loading categories failed\" + error);\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <h2>Manage Task</h2>\n      </>\n    );\n  }\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state) {\n  return {\n    tasks: state.tasks,\n    categories: state.categories\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageTaskPage.propTypes = {\n  categories: PropTypes.array.isRequired,\n  tasks: PropTypes.array.isRequired,\n  actions: PropTypes.func.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchTasks: bindActionCreators(taskActions.fetchTasks, dispatch),\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageTaskPage);\n"]},"metadata":{},"sourceType":"module"}