{"ast":null,"code":"import * as types from \"./actionTypes\";\nimport * as taskApi from \"../../api/taskApi\"; // These are ACTION CREATORS for the task reducer (department) of the store\n// returns entire array of tasks\n\nexport function fetchTasks() {\n  return function (dispatch) {\n    return taskApi.getTasks().then(tasks => {\n      // separate action creator for successfull api call\n      dispatch({\n        type: types.FETCH_TASKS_SUCCESS,\n        tasks: tasks\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\n/* this method creates one of two potential actions on a conditional basis\n either update or create depending on if there's already an id\n*/\n\nexport function saveTask(task) {\n  return function (dispatch, getState) {\n    return taskApi.saveTask(task).then(savedTask => {\n      task.id ? dispatch({\n        type: types.UPDATE_TASK_SUCCESS,\n        task: savedTask\n      }) : dispatch({\n        type: types.CREATE_TASK_SUCCESS,\n        task: savedTask\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport function deleteTask(task) {\n  return function (dispatch) {\n    // Doing optimistic delete, so not dispatching begin/end api call\n    // actions, or apiCallError action since we're not showing the loading status for this.\n    dispatch({\n      type: types.DELETE_TASK_OPTIMISTIC,\n      task\n    });\n    return taskApi.deleteTask(task.id);\n  };\n}","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/redux/actions/taskActions.js"],"names":["types","taskApi","fetchTasks","dispatch","getTasks","then","tasks","type","FETCH_TASKS_SUCCESS","catch","error","saveTask","task","getState","savedTask","id","UPDATE_TASK_SUCCESS","CREATE_TASK_SUCCESS","deleteTask","DELETE_TASK_OPTIMISTIC"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB,C,CAEA;AAEA;;AACA,OAAO,SAASC,UAAT,GAAsB;AAC3B,SAAO,UAASC,QAAT,EAAmB;AACxB,WAAOF,OAAO,CACXG,QADI,GAEJC,IAFI,CAECC,KAAK,IAAI;AACb;AACAH,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEP,KAAK,CAACQ,mBAAd;AAAmCF,QAAAA,KAAK,EAAEA;AAA1C,OAAD,CAAR;AACD,KALI,EAMJG,KANI,CAMEC,KAAK,IAAI;AACd,YAAMA,KAAN;AACD,KARI,CAAP;AASD,GAVD;AAWD;AAED;;;;AAGA,OAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AAC7B,SAAO,UAAST,QAAT,EAAmBU,QAAnB,EAA6B;AAClC,WAAOZ,OAAO,CACXU,QADI,CACKC,IADL,EAEJP,IAFI,CAECS,SAAS,IAAI;AACjBF,MAAAA,IAAI,CAACG,EAAL,GACIZ,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEP,KAAK,CAACgB,mBAAd;AAAmCJ,QAAAA,IAAI,EAAEE;AAAzC,OAAD,CADZ,GAEIX,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEP,KAAK,CAACiB,mBAAd;AAAmCL,QAAAA,IAAI,EAAEE;AAAzC,OAAD,CAFZ;AAGD,KANI,EAOJL,KAPI,CAOEC,KAAK,IAAI;AACd,YAAMA,KAAN;AACD,KATI,CAAP;AAUD,GAXD;AAYD;AAED,OAAO,SAASQ,UAAT,CAAoBN,IAApB,EAA0B;AAC/B,SAAO,UAAST,QAAT,EAAmB;AACxB;AACA;AACAA,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEP,KAAK,CAACmB,sBAAd;AAAsCP,MAAAA;AAAtC,KAAD,CAAR;AACA,WAAOX,OAAO,CAACiB,UAAR,CAAmBN,IAAI,CAACG,EAAxB,CAAP;AACD,GALD;AAMD","sourcesContent":["import * as types from \"./actionTypes\";\nimport * as taskApi from \"../../api/taskApi\";\n\n// These are ACTION CREATORS for the task reducer (department) of the store\n\n// returns entire array of tasks\nexport function fetchTasks() {\n  return function(dispatch) {\n    return taskApi\n      .getTasks()\n      .then(tasks => {\n        // separate action creator for successfull api call\n        dispatch({ type: types.FETCH_TASKS_SUCCESS, tasks: tasks });\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n}\n\n/* this method creates one of two potential actions on a conditional basis\n either update or create depending on if there's already an id\n*/\nexport function saveTask(task) {\n  return function(dispatch, getState) {\n    return taskApi\n      .saveTask(task)\n      .then(savedTask => {\n        task.id\n          ? dispatch({ type: types.UPDATE_TASK_SUCCESS, task: savedTask })\n          : dispatch({ type: types.CREATE_TASK_SUCCESS, task: savedTask });\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n}\n\nexport function deleteTask(task) {\n  return function(dispatch) {\n    // Doing optimistic delete, so not dispatching begin/end api call\n    // actions, or apiCallError action since we're not showing the loading status for this.\n    dispatch({ type: types.DELETE_TASK_OPTIMISTIC, task });\n    return taskApi.deleteTask(task.id);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}