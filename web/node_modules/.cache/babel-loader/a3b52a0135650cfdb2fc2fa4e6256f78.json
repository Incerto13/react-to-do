{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/categories/ManageCategoryPage.js\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\nimport CategoryForm from \"./CategoryForm\";\nimport newCategory from \"./newCategory\";\nimport { toast } from \"react-toastify\"; // need to load categories to make sure array isn't empty\n\nfunction ManageCategoryPage(_ref) {\n  let categories = _ref.categories,\n      history = _ref.history,\n      props = _objectWithoutProperties(_ref, [\"categories\", \"history\"]);\n\n  const _useState = useState(_objectSpread({}, props.category)),\n        _useState2 = _slicedToArray(_useState, 2),\n        category = _useState2[0],\n        setCategory = _useState2[1]; // initialize to empty newCategory\n\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1]; // initialize to empty object\n\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        saving = _useState6[0],\n        setSaving = _useState6[1];\n\n  useEffect(() => {\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    } else {\n      //set category in local state to update when prop updates\n      setCategory(_objectSpread({}, props.category));\n    }\n  }, [props.category, props.actions, categories.length]); // centralized change-handler\n\n  function handleChange(event, index) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // retain local ref to event\n    // will only apply to elements in the task array\n\n    if (typeof index === \"number\") {\n      const newChecklist = this.state.checklist.tasks;\n      newChecklist.tasks[index][name] = value;\n      this.setState({\n        checklist: newChecklist\n      });\n    } else {\n      setCategory(prevCategory => _objectSpread({}, prevCategory, {\n        // needed to save previous changes between saves\n        [name]: value\n      }));\n    }\n  }\n\n  function formIsValid() {\n    const name = category.name;\n    const errors = {};\n    if (!name) errors.name = \"Name is required.\";\n    setErrors(errors); // Form is valid if the errors object still has no properties\n\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSave(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSaving(true);\n    props.actions.saveCategory(category).then(() => {\n      console.log(category);\n      toast.success(\"Category saved.\"); // history is passed in from react-router from <Route>\n\n      history.push(\"/categories\"); // redirect to '/categories' page\n    }).catch(error => {\n      setSaving(false);\n      setErrors({\n        onSave: error.message\n      });\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(CategoryForm, {\n    category: category,\n    errors: errors,\n    onChange: handleChange,\n    onSave: handleSave,\n    saving: saving,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }));\n}\n\nexport function getCategoryBySlug(categories, slug) {\n  /* This is where we're getting the specific category to show/edit in teh form, from url.\n  This returns the category that matches the given slug in url or returns null\n  */\n  return categories.find(category => category.slug === slug) || null;\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug; // this is how we get the slug to i.d. the right category\n\n  const category = slug && state.categories.length > 0 ? getCategoryBySlug(state.categories, slug) : newCategory; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    category,\n    categories: state.categories\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageCategoryPage.propTypes = {\n  category: PropTypes.object.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch),\n      saveCategory: bindActionCreators(categoryActions.saveCategory, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageCategoryPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/categories/ManageCategoryPage.js"],"names":["React","useEffect","useState","PropTypes","connect","categoryActions","bindActionCreators","CategoryForm","newCategory","toast","ManageCategoryPage","categories","history","props","category","setCategory","errors","setErrors","saving","setSaving","length","actions","fetchCategories","catch","error","alert","handleChange","event","index","target","name","value","newChecklist","state","checklist","tasks","setState","prevCategory","formIsValid","Object","keys","handleSave","preventDefault","saveCategory","then","console","log","success","push","onSave","message","getCategoryBySlug","slug","find","mapStateToProps","ownProps","match","params","propTypes","object","isRequired","array","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport { bindActionCreators } from \"redux\";\nimport CategoryForm from \"./CategoryForm\";\nimport newCategory from \"./newCategory\";\nimport { toast } from \"react-toastify\";\n\n// need to load categories to make sure array isn't empty\n\nfunction ManageCategoryPage({ categories, history, ...props }) {\n  const [category, setCategory] = useState({ ...props.category }); // initialize to empty newCategory\n  const [errors, setErrors] = useState({}); // initialize to empty object\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    } else {\n      //set category in local state to update when prop updates\n      setCategory({ ...props.category });\n    }\n  }, [props.category, props.actions, categories.length]);\n\n  // centralized change-handler\n  function handleChange(event, index) {\n    const { name, value } = event.target; // retain local ref to event\n    // will only apply to elements in the task array\n    if (typeof index === \"number\") {\n      const newChecklist = this.state.checklist.tasks;\n      newChecklist.tasks[index][name] = value;\n      this.setState({\n        checklist: newChecklist\n      });\n    } else {\n      setCategory(prevCategory => ({\n        ...prevCategory, // needed to save previous changes between saves\n        [name]: value\n      }));\n    }\n  }\n\n  function formIsValid() {\n    const { name } = category;\n    const errors = {};\n\n    if (!name) errors.name = \"Name is required.\";\n\n    setErrors(errors);\n    // Form is valid if the errors object still has no properties\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSave(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSaving(true);\n    props.actions\n      .saveCategory(category)\n      .then(() => {\n        console.log(category);\n        toast.success(\"Category saved.\");\n        // history is passed in from react-router from <Route>\n        history.push(\"/categories\"); // redirect to '/categories' page\n      })\n      .catch(error => {\n        setSaving(false);\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  return (\n    <>\n      <CategoryForm\n        category={category}\n        errors={errors}\n        onChange={handleChange}\n        onSave={handleSave}\n        saving={saving}\n      />\n    </>\n  );\n}\n\nexport function getCategoryBySlug(categories, slug) {\n  /* This is where we're getting the specific category to show/edit in teh form, from url.\n  This returns the category that matches the given slug in url or returns null\n  */\n  return categories.find(category => category.slug === slug) || null;\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug; // this is how we get the slug to i.d. the right category\n  const category =\n    slug && state.categories.length > 0\n      ? getCategoryBySlug(state.categories, slug)\n      : newCategory; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    category,\n    categories: state.categories\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageCategoryPage.propTypes = {\n  category: PropTypes.object.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      ),\n      saveCategory: bindActionCreators(categoryActions.saveCategory, dispatch)\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageCategoryPage);\n"]},"metadata":{},"sourceType":"module"}