{"ast":null,"code":"var _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/checklists/ChecklistTasksView.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\"; // Note, tasks within checklists are different and un-related to standalone tasks module\n\nconst ChecklistTasksView = props => {\n  const tasks = props.tasks,\n        onTaskToggle = props.onTaskToggle;\n  const sortedTasks = tasks.sort((a, b) => {\n    // sort by: completed (false first), then timeOfCompletion\n    return (a.completed === b.completed ? 0 : a.completed ? 1 : -1) || a.timeOfCompletion - b.timeOfCompletion;\n  });\n  return React.createElement(React.Fragment, null, React.createElement(\"table\", {\n    className: \"table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"Task\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Body\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Category\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, sortedTasks.map((task, index) => {\n    return React.createElement(\"tr\", {\n      key: task.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, task.title), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, task.body), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, task.category), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: !task.completed ? \"btn btn-outline-success\" : \"btn btn-success\",\n      onClick: event => onTaskToggle(event, task),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, !task.completed ? \"Incomplete\" : \"Completed\")));\n  }))));\n};\n\nChecklistTasksView.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  onTaskToggle: PropTypes.func.isRequired\n};\nexport default ChecklistTasksView;","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/checklists/ChecklistTasksView.js"],"names":["React","PropTypes","ChecklistTasksView","props","tasks","onTaskToggle","sortedTasks","sort","a","b","completed","timeOfCompletion","map","task","index","id","title","body","category","event","propTypes","array","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AAEA,MAAMC,kBAAkB,GAAGC,KAAK,IAAI;AAAA,QAC1BC,KAD0B,GACFD,KADE,CAC1BC,KAD0B;AAAA,QACnBC,YADmB,GACFF,KADE,CACnBE,YADmB;AAGlC,QAAMC,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACvC;AACA,WACE,CAACD,CAAC,CAACE,SAAF,KAAgBD,CAAC,CAACC,SAAlB,GAA8B,CAA9B,GAAkCF,CAAC,CAACE,SAAF,GAAc,CAAd,GAAkB,CAAC,CAAtD,KACAF,CAAC,CAACG,gBAAF,GAAqBF,CAAC,CAACE,gBAFzB;AAID,GANmB,CAApB;AAQA,SACE,0CACE;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CADF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,WAAW,CAACM,GAAZ,CAAgB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChC,WACE;AAAI,MAAA,GAAG,EAAED,IAAI,CAACE,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,IAAI,CAACG,KAAV,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKH,IAAI,CAACI,IAAV,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKJ,IAAI,CAACK,QAAV,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EACP,CAACL,IAAI,CAACH,SAAN,GACI,yBADJ,GAEI,iBALR;AAOE,MAAA,OAAO,EAAES,KAAK,IAAId,YAAY,CAACc,KAAD,EAAQN,IAAR,CAPhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASG,CAACA,IAAI,CAACH,SAAN,GAAkB,YAAlB,GAAiC,WATpC,CADF,CALF,CADF;AAqBD,GAtBA,CADH,CAVF,CADF,CADF;AAwCD,CAnDD;;AAqDAR,kBAAkB,CAACkB,SAAnB,GAA+B;AAC7BhB,EAAAA,KAAK,EAAEH,SAAS,CAACoB,KAAV,CAAgBC,UADM;AAE7BjB,EAAAA,YAAY,EAAEJ,SAAS,CAACsB,IAAV,CAAeD;AAFA,CAA/B;AAKA,eAAepB,kBAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Note, tasks within checklists are different and un-related to standalone tasks module\n\nconst ChecklistTasksView = props => {\n  const { tasks, onTaskToggle } = props;\n\n  const sortedTasks = tasks.sort((a, b) => {\n    // sort by: completed (false first), then timeOfCompletion\n    return (\n      (a.completed === b.completed ? 0 : a.completed ? 1 : -1) ||\n      a.timeOfCompletion - b.timeOfCompletion\n    );\n  });\n\n  return (\n    <>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th />\n            <th>Task</th>\n            <th>Body</th>\n            <th>Category</th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {sortedTasks.map((task, index) => {\n            return (\n              <tr key={task.id}>\n                <td></td>\n                <td>{task.title}</td>\n                <td>{task.body}</td>\n                <td>{task.category}</td>\n                <td>\n                  <button\n                    type=\"button\"\n                    className={\n                      !task.completed\n                        ? \"btn btn-outline-success\"\n                        : \"btn btn-success\"\n                    }\n                    onClick={event => onTaskToggle(event, task)}\n                  >\n                    {!task.completed ? \"Incomplete\" : \"Completed\"}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nChecklistTasksView.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  onTaskToggle: PropTypes.func.isRequired\n};\n\nexport default ChecklistTasksView;\n"]},"metadata":{},"sourceType":"module"}