{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/checklists/ManageChecklistPage.js\";\n// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport ChecklistForm from \"./ChecklistForm\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage(_ref) {\n  let checklists = _ref.checklists,\n      categories = _ref.categories,\n      history = _ref.history,\n      props = _objectWithoutProperties(_ref, [\"checklists\", \"categories\", \"history\"]);\n\n  const _useState = useState(_objectSpread({}, props.checklist)),\n        _useState2 = _slicedToArray(_useState, 2),\n        checklist = _useState2[0],\n        setChecklist = _useState2[1]; // initialize to empty newTask\n\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1]; // initialize to empty object\n\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        initialPageLoad = _useState6[0],\n        setInitialPageLoad = _useState6[1]; // should only fetch checklist from api once\n\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        savingForm = _useState8[0],\n        setSavingForm = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        displayForm = _useState10[0],\n        setDisplayForm = _useState10[1];\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist(_objectSpread({}, props.checklist)); // only once on initial page load\n      // setInitialPageLoad(true);\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [props.actions, checklists.length, props.checklist, categories.length, initialPageLoad]); // useEffect(() => {\n  //   const newChecklist = Object.assignchecklist;\n  //   newChecklist.tasks[0].completed = newTaskToggleValue.current;\n  //   props.actions\n  //     .saveChecklist(checklist)\n  //     .then(() => {\n  //       toast.success(\"Task updated.\");\n  //     })\n  //     .catch(error => {\n  //       setErrors({ onSave: error.message });\n  //     });\n  // }, [checklist, props.actions]);\n  // useEffect(() => {\n  //   if (taskUpdated === true)\n  //     props.actions\n  //       .saveChecklist(checklist)\n  //       .then(() => {\n  //         toast.success(\"Task updated.\");\n  //       })\n  //       .catch(error => {\n  //         setErrors({ onSave: error.message });\n  //       });\n  //   // setTaskUpdated(false);\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [checklist, props.actions, taskUpdated]);\n  // async function handleTaskToggle(event, task, index, value) {\n  //   const { completed } = task;\n  //   // newTaskToggleValue.current = event.target.value;\n  //   const newChecklist = Object.assign({}, checklist);\n  //   newChecklist.tasks[index].completed = value; // !completed;\n  //   console.log(\"value: \", value);\n  //   console.log(\"newChecklist: \", newChecklist);\n  //   await props.actions\n  //     .saveChecklist(checklist)\n  //     .then(() => {\n  //       toast.success(\"Task updated.\");\n  //     })\n  //     .catch(error => {\n  //       setErrors({ onSave: error.message });\n  //     });\n  //   const newTasks = [...checklist.tasks];\n  //   newTasks[index].completed = !completed;\n  //   // need to change this to be based on index for sort to work\n  //   // replace old array with new one\n  //   setChecklist({ ...props.checklist, tasks: newTasks });\n  //   setTaskUpdated(true);\n  // }\n\n  function handleTaskToggle(event, task) {\n    event.preventDefault();\n    const id = task.id;\n    console.log(\"id: \", id);\n    props.actions.saveChecklist(checklist).then(() => {\n      toast.success(\"Task updated.\");\n    }).catch(error => {\n      setErrors({\n        onSave: error.message\n      });\n    });\n  } // centralized change-handler (on form only)\n\n\n  function handleChange(event, index) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // retain local ref to event\n    // const index = event.target.getAttribute(\"index\");\n\n    console.log(index); // will only apply to elements in the task array\n\n    if (index || index === 0) {\n      const newTasks = [...checklist.tasks];\n      newTasks[index][name] = value;\n      setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n        // maintain all other parts of the object\n        tasks: newTasks\n      }));\n    } else {\n      setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n        [name]: value\n      }));\n    }\n\n    console.log(checklist);\n  }\n\n  function formIsValid() {\n    const title = checklist.title,\n          tasks = checklist.tasks;\n    const errors = {};\n    if (!title) errors.title = \"Title is required.\"; // if (!category) errors.category = \"Category is required.\";\n\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n    setErrors(errors); // Form is valid if the errors object still has no properties\n\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSaveForm(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSavingForm(true);\n    props.actions.saveChecklist(checklist).then(() => {\n      console.log(checklist);\n      toast.success(\"Checklist saved.\"); // history is passed in from react-router from <Route>\n      // history.push(\"/checklists\"); // redirect to '/checklists' page\n    }).catch(error => {\n      setSavingForm(false);\n      setErrors({\n        onSave: error.message\n      });\n    });\n  }\n\n  return React.createElement(React.Fragment, null, !displayForm && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, checklist.title), React.createElement(\"button\", {\n    style: {\n      marginBottom: 20\n    },\n    className: \"btn btn-primary add-task\",\n    onClick: () => setDisplayForm(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"Edit Checklist\"), React.createElement(ChecklistTaskView, {\n    tasks: checklist.tasks,\n    onTaskToggle: handleTaskToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  })), displayForm && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(ChecklistForm, {\n    checklist: checklist,\n    errors: errors,\n    categories: categories,\n    onChange: handleChange,\n    onSave: handleSaveForm,\n    saving: savingForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  })));\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist = slug && state.checklists.length > 0 ? getChecklistBySlug(state.checklists, slug) : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(checklistActions.fetchChecklists, dispatch),\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch),\n      saveChecklist: bindActionCreators(checklistActions.saveChecklist, dispatch),\n      toggleTaskCompletion: bindActionCreators(checklistActions.toggleTaskCompletion, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageChecklistPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/checklists/ManageChecklistPage.js"],"names":["React","useEffect","useState","PropTypes","connect","checklistActions","categoryActions","ChecklistTaskView","ChecklistForm","newChecklist","bindActionCreators","toast","ManageChecklistPage","checklists","categories","history","props","checklist","setChecklist","errors","setErrors","initialPageLoad","setInitialPageLoad","savingForm","setSavingForm","displayForm","setDisplayForm","length","actions","fetchChecklists","catch","error","alert","fetchCategories","handleTaskToggle","event","task","preventDefault","id","console","log","saveChecklist","then","success","onSave","message","handleChange","index","target","name","value","newTasks","tasks","prevChecklist","formIsValid","title","Object","keys","handleSaveForm","marginBottom","getChecklistBySlug","slug","find","mapStateToProps","state","ownProps","match","params","propTypes","object","isRequired","array","mapDispatchToProps","dispatch","toggleTaskCompletion"],"mappings":"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","sourcesContent":["// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\n\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport ChecklistForm from \"./ChecklistForm\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage({ checklists, categories, history, ...props }) {\n  const [checklist, setChecklist] = useState({ ...props.checklist }); // initialize to empty newTask\n  const [errors, setErrors] = useState({}); // initialize to empty object\n  const [initialPageLoad, setInitialPageLoad] = useState(false); // should only fetch checklist from api once\n  const [savingForm, setSavingForm] = useState(false);\n  const [displayForm, setDisplayForm] = useState(false);\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist({ ...props.checklist });\n      // only once on initial page load\n      // setInitialPageLoad(true);\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [\n    props.actions,\n    checklists.length,\n    props.checklist,\n    categories.length,\n    initialPageLoad\n  ]);\n\n  // useEffect(() => {\n  //   const newChecklist = Object.assignchecklist;\n  //   newChecklist.tasks[0].completed = newTaskToggleValue.current;\n  //   props.actions\n  //     .saveChecklist(checklist)\n  //     .then(() => {\n  //       toast.success(\"Task updated.\");\n  //     })\n  //     .catch(error => {\n  //       setErrors({ onSave: error.message });\n  //     });\n  // }, [checklist, props.actions]);\n\n  // useEffect(() => {\n  //   if (taskUpdated === true)\n  //     props.actions\n  //       .saveChecklist(checklist)\n  //       .then(() => {\n  //         toast.success(\"Task updated.\");\n  //       })\n  //       .catch(error => {\n  //         setErrors({ onSave: error.message });\n  //       });\n  //   // setTaskUpdated(false);\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [checklist, props.actions, taskUpdated]);\n\n  // async function handleTaskToggle(event, task, index, value) {\n  //   const { completed } = task;\n  //   // newTaskToggleValue.current = event.target.value;\n  //   const newChecklist = Object.assign({}, checklist);\n  //   newChecklist.tasks[index].completed = value; // !completed;\n  //   console.log(\"value: \", value);\n  //   console.log(\"newChecklist: \", newChecklist);\n  //   await props.actions\n  //     .saveChecklist(checklist)\n  //     .then(() => {\n  //       toast.success(\"Task updated.\");\n  //     })\n  //     .catch(error => {\n  //       setErrors({ onSave: error.message });\n  //     });\n  //   const newTasks = [...checklist.tasks];\n  //   newTasks[index].completed = !completed;\n  //   // need to change this to be based on index for sort to work\n  //   // replace old array with new one\n  //   setChecklist({ ...props.checklist, tasks: newTasks });\n  //   setTaskUpdated(true);\n  // }\n\n  function handleTaskToggle(event, task) {\n    event.preventDefault();\n    const { id } = task;\n    console.log(\"id: \", id);\n    props.actions\n      .saveChecklist(checklist)\n      .then(() => {\n        toast.success(\"Task updated.\");\n      })\n      .catch(error => {\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  // centralized change-handler (on form only)\n  function handleChange(event, index) {\n    const { name, value } = event.target; // retain local ref to event\n    // const index = event.target.getAttribute(\"index\");\n    console.log(index);\n    // will only apply to elements in the task array\n    if (index || index === 0) {\n      const newTasks = [...checklist.tasks];\n      newTasks[index][name] = value;\n      setChecklist(prevChecklist => ({\n        ...prevChecklist, // maintain all other parts of the object\n        tasks: newTasks\n      }));\n    } else {\n      setChecklist(prevChecklist => ({\n        ...prevChecklist,\n        [name]: value\n      }));\n    }\n    console.log(checklist);\n  }\n\n  function formIsValid() {\n    const { title, tasks } = checklist;\n    const errors = {};\n\n    if (!title) errors.title = \"Title is required.\";\n    // if (!category) errors.category = \"Category is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n\n    setErrors(errors);\n    // Form is valid if the errors object still has no properties\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSaveForm(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSavingForm(true);\n    props.actions\n      .saveChecklist(checklist)\n      .then(() => {\n        console.log(checklist);\n        toast.success(\"Checklist saved.\");\n        // history is passed in from react-router from <Route>\n        // history.push(\"/checklists\"); // redirect to '/checklists' page\n      })\n      .catch(error => {\n        setSavingForm(false);\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  return (\n    <>\n      {!displayForm && (\n        <div>\n          <h2>{checklist.title}</h2>\n\n          <button\n            style={{ marginBottom: 20 }}\n            className=\"btn btn-primary add-task\"\n            onClick={() => setDisplayForm(true)}\n          >\n            Edit Checklist\n          </button>\n\n          <ChecklistTaskView\n            tasks={checklist.tasks}\n            onTaskToggle={handleTaskToggle}\n          />\n        </div>\n      )}\n\n      {displayForm && (\n        <div>\n          <ChecklistForm\n            checklist={checklist}\n            errors={errors}\n            categories={categories}\n            onChange={handleChange}\n            onSave={handleSaveForm}\n            saving={savingForm}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist =\n    slug && state.checklists.length > 0\n      ? getChecklistBySlug(state.checklists, slug)\n      : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(\n        checklistActions.fetchChecklists,\n        dispatch\n      ),\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      ),\n      saveChecklist: bindActionCreators(\n        checklistActions.saveChecklist,\n        dispatch\n      ),\n      toggleTaskCompletion: bindActionCreators(\n        checklistActions.toggleTaskCompletion,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageChecklistPage);\n"]},"metadata":{},"sourceType":"module"}