{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ManageChecklistPage.js\";\n// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport usePrevious from \"../custom_hooks/usePrevious\";\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport ChecklistForm from \"./ChecklistForm\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage(_ref) {\n  let checklists = _ref.checklists,\n      categories = _ref.categories,\n      history = _ref.history,\n      props = _objectWithoutProperties(_ref, [\"checklists\", \"categories\", \"history\"]);\n\n  const _useState = useState(_objectSpread({}, props.checklist)),\n        _useState2 = _slicedToArray(_useState, 2),\n        checklist = _useState2[0],\n        setChecklist = _useState2[1]; // initialize to empty newTask\n\n\n  const prevChecklist = usePrevious(checklist);\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1]; // initialize to empty object\n\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        checklistFetched = _useState6[0],\n        setChecklistFetched = _useState6[1]; // should only fetch checklist from api once\n\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        savingForm = _useState8[0],\n        setSavingForm = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        taskUpdated = _useState10[0],\n        setTaskUpdated = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        displayForm = _useState12[0],\n        setDisplayForm = _useState12[1]; // will need a variable for showing Form v. view\n\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else if (checklistFetched === false) {\n      //set checklist in local state to update when prop updates\n      setChecklist(_objectSpread({}, props.checklist));\n      setChecklistFetched(true); // only should load this once\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [props.actions, checklists.length, props.checklist, categories.length]);\n\n  function handleTaskToggle(event, task, index) {\n    setTaskUpdated(true);\n    const newStatus = event.target.value;\n    const newTasks = checklist.tasks;\n    newTasks[index].completed = true; // !completed;\n    // replace old array with new one\n\n    setChecklist(_objectSpread({}, checklist, {\n      tasks: newTasks\n    }));\n  } // need to put saveAfterTaskToggle function inside useEffect\n\n\n  useEffect(() => {\n    if (taskUpdated && checklist !== prevChecklist) {\n      props.actions.saveChecklist(checklist).then(() => {\n        // console.log(checklist);\n        toast.success(\"Task updated.\");\n        setTaskUpdated(false);\n      }).catch(error => {\n        setErrors({\n          onSave: error.message\n        });\n        setTaskUpdated(false);\n      });\n    }\n  }, [checklist, checklists, prevChecklist, props.actions, taskUpdated]); // centralized change-handler (on form only)\n\n  function handleChange(event, index) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // retain local ref to event\n    // const index = event.target.getAttribute(\"index\");\n\n    console.log(index); // will only apply to elements in the task array\n\n    if (index || index === 0) {\n      const newTasks = [...checklist.tasks];\n      newTasks[index][name] = value;\n      setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n        // maintain all other parts of the object\n        tasks: newTasks\n      }));\n    } else {\n      setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n        [name]: value\n      }));\n    }\n\n    console.log(checklist);\n  }\n\n  function formIsValid() {\n    const title = checklist.title,\n          tasks = checklist.tasks;\n    const errors = {};\n    if (!title) errors.title = \"Title is required.\"; // if (!category) errors.category = \"Category is required.\";\n\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n    setErrors(errors); // Form is valid if the errors object still has no properties\n\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSaveForm(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSavingForm(true);\n    props.actions.saveChecklist(checklist).then(() => {\n      console.log(checklist);\n      toast.success(\"Checklist saved.\"); // history is passed in from react-router from <Route>\n\n      history.push(\"/checklists\"); // redirect to '/checklists' page\n    }).catch(error => {\n      setSavingForm(false);\n      setErrors({\n        onSave: error.message\n      });\n    });\n  }\n\n  console.log(\"taskUpdated: \".concat(taskUpdated));\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: () => {\n      setTaskUpdated(true);\n      console.log(taskUpdated);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"Save\"), !displayForm && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, checklist.title), React.createElement(\"button\", {\n    style: {\n      marginBottom: 20\n    },\n    className: \"btn btn-primary add-task\",\n    onClick: () => setDisplayForm(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Edit Checklist\"), React.createElement(ChecklistTaskView, {\n    tasks: checklist.tasks,\n    onTaskToggle: handleTaskToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  })), displayForm && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(ChecklistForm, {\n    checklist: checklist,\n    errors: errors,\n    categories: categories,\n    onChange: handleChange,\n    onSave: handleSaveForm,\n    saving: savingForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  })));\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist = slug && state.checklists.length > 0 ? getChecklistBySlug(state.checklists, slug) : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(checklistActions.fetchChecklists, dispatch),\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch),\n      saveChecklist: bindActionCreators(checklistActions.saveChecklist, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageChecklistPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ManageChecklistPage.js"],"names":["React","useEffect","useState","PropTypes","connect","checklistActions","categoryActions","usePrevious","ChecklistTaskView","ChecklistForm","newChecklist","bindActionCreators","toast","ManageChecklistPage","checklists","categories","history","props","checklist","setChecklist","prevChecklist","errors","setErrors","checklistFetched","setChecklistFetched","savingForm","setSavingForm","taskUpdated","setTaskUpdated","displayForm","setDisplayForm","length","actions","fetchChecklists","catch","error","alert","fetchCategories","handleTaskToggle","event","task","index","newStatus","target","value","newTasks","tasks","completed","saveChecklist","then","success","onSave","message","handleChange","name","console","log","formIsValid","title","Object","keys","handleSaveForm","preventDefault","push","marginBottom","getChecklistBySlug","slug","find","mapStateToProps","state","ownProps","match","params","propTypes","object","isRequired","array","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\n\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport usePrevious from \"../custom_hooks/usePrevious\";\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport ChecklistForm from \"./ChecklistForm\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage({ checklists, categories, history, ...props }) {\n  const [checklist, setChecklist] = useState({ ...props.checklist }); // initialize to empty newTask\n  const prevChecklist = usePrevious(checklist);\n  const [errors, setErrors] = useState({}); // initialize to empty object\n  const [checklistFetched, setChecklistFetched] = useState(false); // should only fetch checklist from api once\n  const [savingForm, setSavingForm] = useState(false);\n  const [taskUpdated, setTaskUpdated] = useState(false);\n  const [displayForm, setDisplayForm] = useState(false);\n  // will need a variable for showing Form v. view\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else if (checklistFetched === false) {\n      //set checklist in local state to update when prop updates\n      setChecklist({ ...props.checklist });\n      setChecklistFetched(true); // only should load this once\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.actions, checklists.length, props.checklist, categories.length]);\n\n  function handleTaskToggle(event, task, index) {\n    setTaskUpdated(true);\n    const newStatus = event.target.value;\n    const newTasks = checklist.tasks;\n    newTasks[index].completed = true; // !completed;\n    // replace old array with new one\n    setChecklist({ ...checklist, tasks: newTasks });\n  }\n\n  // need to put saveAfterTaskToggle function inside useEffect\n  useEffect(() => {\n    if (taskUpdated && checklist !== prevChecklist) {\n      props.actions\n        .saveChecklist(checklist)\n        .then(() => {\n          // console.log(checklist);\n          toast.success(\"Task updated.\");\n          setTaskUpdated(false);\n        })\n        .catch(error => {\n          setErrors({ onSave: error.message });\n          setTaskUpdated(false);\n        });\n    }\n  }, [checklist, checklists, prevChecklist, props.actions, taskUpdated]);\n\n  // centralized change-handler (on form only)\n  function handleChange(event, index) {\n    const { name, value } = event.target; // retain local ref to event\n    // const index = event.target.getAttribute(\"index\");\n    console.log(index);\n    // will only apply to elements in the task array\n    if (index || index === 0) {\n      const newTasks = [...checklist.tasks];\n      newTasks[index][name] = value;\n      setChecklist(prevChecklist => ({\n        ...prevChecklist, // maintain all other parts of the object\n        tasks: newTasks\n      }));\n    } else {\n      setChecklist(prevChecklist => ({\n        ...prevChecklist,\n        [name]: value\n      }));\n    }\n    console.log(checklist);\n  }\n\n  function formIsValid() {\n    const { title, tasks } = checklist;\n    const errors = {};\n\n    if (!title) errors.title = \"Title is required.\";\n    // if (!category) errors.category = \"Category is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n\n    setErrors(errors);\n    // Form is valid if the errors object still has no properties\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSaveForm(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSavingForm(true);\n    props.actions\n      .saveChecklist(checklist)\n      .then(() => {\n        console.log(checklist);\n        toast.success(\"Checklist saved.\");\n        // history is passed in from react-router from <Route>\n        history.push(\"/checklists\"); // redirect to '/checklists' page\n      })\n      .catch(error => {\n        setSavingForm(false);\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  console.log(`taskUpdated: ${taskUpdated}`);\n  return (\n    <>\n      <button\n        onClick={() => {\n          setTaskUpdated(true);\n          console.log(taskUpdated);\n        }}\n      >\n        Save\n      </button>\n\n      {!displayForm && (\n        <div>\n          <h2>{checklist.title}</h2>\n\n          <button\n            style={{ marginBottom: 20 }}\n            className=\"btn btn-primary add-task\"\n            onClick={() => setDisplayForm(true)}\n          >\n            Edit Checklist\n          </button>\n\n          <ChecklistTaskView\n            tasks={checklist.tasks}\n            onTaskToggle={handleTaskToggle}\n          />\n        </div>\n      )}\n\n      {displayForm && (\n        <div>\n          <ChecklistForm\n            checklist={checklist}\n            errors={errors}\n            categories={categories}\n            onChange={handleChange}\n            onSave={handleSaveForm}\n            saving={savingForm}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist =\n    slug && state.checklists.length > 0\n      ? getChecklistBySlug(state.checklists, slug)\n      : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(\n        checklistActions.fetchChecklists,\n        dispatch\n      ),\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      ),\n      saveChecklist: bindActionCreators(\n        checklistActions.saveChecklist,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageChecklistPage);\n"]},"metadata":{},"sourceType":"module"}