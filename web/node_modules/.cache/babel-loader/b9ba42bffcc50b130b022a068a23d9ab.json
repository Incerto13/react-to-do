{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/checklists/ManageChecklistPage.js\";\n// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\nimport React, { useEffect, useState, useForceUpdate } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport ChecklistForm from \"./ChecklistForm\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage(_ref) {\n  let categories = _ref.categories,\n      history = _ref.history,\n      props = _objectWithoutProperties(_ref, [\"categories\", \"history\"]);\n\n  const forceUpdate = useForceUpdate();\n\n  const _useState = useState(_objectSpread({}, props.checklist)),\n        _useState2 = _slicedToArray(_useState, 2),\n        checklist = _useState2[0],\n        setChecklist = _useState2[1]; // initialize to empty newTask\n\n\n  const _useState3 = useState(_objectSpread({}, props.checklists)),\n        _useState4 = _slicedToArray(_useState3, 2),\n        checklists = _useState4[0],\n        setChecklists = _useState4[1];\n\n  const _useState5 = useState({}),\n        _useState6 = _slicedToArray(_useState5, 2),\n        errors = _useState6[0],\n        setErrors = _useState6[1]; // initialize to empty object\n\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        saving = _useState8[0],\n        setSaving = _useState8[1];\n\n  const _useState9 = useState(true),\n        _useState10 = _slicedToArray(_useState9, 2),\n        saved = _useState10[0],\n        setSaved = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        displayForm = _useState12[0],\n        setDisplayForm = _useState12[1];\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist(_objectSpread({}, props.checklist));\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [checklist, props.actions, checklists.length, props.checklist, categories.length]); // useEffect(() => {\n  //   const newChecklist = Object.assignchecklist;\n  //   newChecklist.tasks[0].completed = newTaskToggleValue.current;\n  //   props.actions\n  //     .saveChecklist(checklist)\n  //     .then(() => {\n  //       toast.success(\"Task updated.\");\n  //     })\n  //     .catch(error => {\n  //       setErrors({ onSave: error.message });\n  //     });\n  // }, [checklist, props.actions]);\n  // useEffect(() => {\n  //   if (taskUpdated === true)\n  //     props.actions\n  //       .saveChecklist(checklist)\n  //       .then(() => {\n  //         toast.success(\"Task updated.\");\n  //       })\n  //       .catch(error => {\n  //         setErrors({ onSave: error.message });\n  //       });\n  //   // setTaskUpdated(false);\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [checklist, props.actions, taskUpdated]);\n\n  const handleTaskToggle = (event, task) => {\n    const id = task.id;\n    const index = checklist.tasks.findIndex(task => {\n      return task.id === id;\n    });\n    const oldStatus = checklist.tasks[index].completed;\n    const newTasks = [...checklist.tasks];\n    newTasks[index].completed = !oldStatus;\n    setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n      tasks: newTasks\n    }));\n    setSaved(false);\n    forceUpdate();\n  }; // centralized change-handler (on form only)\n\n\n  function handleChange(event, index) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // retain local ref to event\n    // const index = event.target.getAttribute(\"index\");\n\n    console.log(index); // will only apply to elements in the task array\n\n    if (index || index === 0) {\n      const newTasks = [...checklist.tasks];\n      newTasks[index][name] = value;\n      setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n        // maintain all other parts of the object\n        tasks: newTasks\n      }));\n    } else {\n      setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n        [name]: value\n      }));\n    }\n\n    console.log(checklist);\n  }\n\n  function formIsValid() {\n    const title = checklist.title,\n          tasks = checklist.tasks;\n    const categories = checklist.tasks.filter(task => {\n      return task.category;\n    });\n    const errors = {};\n    if (!title) errors.title = \"Title is required.\";\n    if (categories.length !== tasks.length) errors.category = \"Category is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n    setErrors(errors); // Form is valid if the errors object still has no properties\n\n    return Object.keys(errors).length === 0;\n  }\n\n  async function handleSave(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSaving(true); // **** DEBUGGING\n\n    console.log(\"saved: \", saved);\n    console.log(\"saving: \", saving);\n    await props.actions.saveChecklist(checklist).then(() => {\n      console.log(checklist);\n      toast.success(\"Checklist saved.\");\n      setSaving(false);\n      setSaved(true); // history is passed in from react-router from <Route>\n\n      if (displayForm) {\n        history.push(\"/checklists\"); // redirect to '/checklists' page\n      }\n    }).catch(error => {\n      setSaving(false);\n      setErrors({\n        onSave: error.message\n      });\n    });\n  }\n\n  return React.createElement(React.Fragment, null, !displayForm && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, checklist.title), React.createElement(\"button\", {\n    style: {\n      marginBottom: 20\n    },\n    className: \"btn btn-primary add-task\",\n    onClick: () => setDisplayForm(true),\n    disabled: !saved,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Edit Checklist\"), React.createElement(ChecklistTaskView, {\n    tasks: checklist.tasks,\n    onTaskToggle: handleTaskToggle,\n    onSave: handleSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  })), displayForm && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(ChecklistForm, {\n    checklist: checklist,\n    errors: errors,\n    categories: categories,\n    onChange: handleChange,\n    onSave: handleSave,\n    saving: saving,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  })));\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist = slug && state.checklists.length > 0 ? getChecklistBySlug(state.checklists, slug) : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(checklistActions.fetchChecklists, dispatch),\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch),\n      saveChecklist: bindActionCreators(checklistActions.saveChecklist, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageChecklistPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/checklists/ManageChecklistPage.js"],"names":["React","useEffect","useState","useForceUpdate","PropTypes","connect","checklistActions","categoryActions","ChecklistTaskView","ChecklistForm","newChecklist","bindActionCreators","toast","ManageChecklistPage","categories","history","props","forceUpdate","checklist","setChecklist","checklists","setChecklists","errors","setErrors","saving","setSaving","saved","setSaved","displayForm","setDisplayForm","length","actions","fetchChecklists","catch","error","alert","fetchCategories","handleTaskToggle","event","task","id","index","tasks","findIndex","oldStatus","completed","newTasks","prevChecklist","handleChange","target","name","value","console","log","formIsValid","title","filter","category","Object","keys","handleSave","preventDefault","saveChecklist","then","success","push","onSave","message","marginBottom","getChecklistBySlug","slug","find","mapStateToProps","state","ownProps","match","params","propTypes","object","isRequired","array","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\n\nimport React, { useEffect, useState, useForceUpdate } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport ChecklistTaskView from \"./ChecklistTaskView\";\nimport ChecklistForm from \"./ChecklistForm\";\nimport newChecklist from \"./newChecklist\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage({ categories, history, ...props }) {\n  const forceUpdate = useForceUpdate();\n  const [checklist, setChecklist] = useState({ ...props.checklist }); // initialize to empty newTask\n  const [checklists, setChecklists] = useState({ ...props.checklists });\n  const [errors, setErrors] = useState({}); // initialize to empty object\n  const [saving, setSaving] = useState(false);\n  const [saved, setSaved] = useState(true);\n  const [displayForm, setDisplayForm] = useState(false);\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist({ ...props.checklist });\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    }\n  }, [\n    checklist,\n    props.actions,\n    checklists.length,\n    props.checklist,\n    categories.length\n  ]);\n\n  // useEffect(() => {\n  //   const newChecklist = Object.assignchecklist;\n  //   newChecklist.tasks[0].completed = newTaskToggleValue.current;\n  //   props.actions\n  //     .saveChecklist(checklist)\n  //     .then(() => {\n  //       toast.success(\"Task updated.\");\n  //     })\n  //     .catch(error => {\n  //       setErrors({ onSave: error.message });\n  //     });\n  // }, [checklist, props.actions]);\n\n  // useEffect(() => {\n  //   if (taskUpdated === true)\n  //     props.actions\n  //       .saveChecklist(checklist)\n  //       .then(() => {\n  //         toast.success(\"Task updated.\");\n  //       })\n  //       .catch(error => {\n  //         setErrors({ onSave: error.message });\n  //       });\n  //   // setTaskUpdated(false);\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [checklist, props.actions, taskUpdated]);\n\n  const handleTaskToggle = (event, task) => {\n    const { id } = task;\n    const index = checklist.tasks.findIndex(task => {\n      return task.id === id;\n    });\n    const oldStatus = checklist.tasks[index].completed;\n    const newTasks = [...checklist.tasks];\n    newTasks[index].completed = !oldStatus;\n    setChecklist(prevChecklist => ({\n      ...prevChecklist,\n      tasks: newTasks\n    }));\n    setSaved(false);\n    forceUpdate();\n  };\n\n  // centralized change-handler (on form only)\n  function handleChange(event, index) {\n    const { name, value } = event.target; // retain local ref to event\n    // const index = event.target.getAttribute(\"index\");\n    console.log(index);\n    // will only apply to elements in the task array\n    if (index || index === 0) {\n      const newTasks = [...checklist.tasks];\n      newTasks[index][name] = value;\n      setChecklist(prevChecklist => ({\n        ...prevChecklist, // maintain all other parts of the object\n        tasks: newTasks\n      }));\n    } else {\n      setChecklist(prevChecklist => ({\n        ...prevChecklist,\n        [name]: value\n      }));\n    }\n    console.log(checklist);\n  }\n\n  function formIsValid() {\n    const { title, tasks } = checklist;\n    const categories = checklist.tasks.filter(task => {\n      return task.category;\n    });\n    const errors = {};\n\n    if (!title) errors.title = \"Title is required.\";\n    if (categories.length !== tasks.length)\n      errors.category = \"Category is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n\n    setErrors(errors);\n    // Form is valid if the errors object still has no properties\n    return Object.keys(errors).length === 0;\n  }\n\n  async function handleSave(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSaving(true);\n    // **** DEBUGGING\n    console.log(\"saved: \", saved);\n    console.log(\"saving: \", saving);\n    await props.actions\n      .saveChecklist(checklist)\n      .then(() => {\n        console.log(checklist);\n        toast.success(\"Checklist saved.\");\n        setSaving(false);\n        setSaved(true);\n        // history is passed in from react-router from <Route>\n        if (displayForm) {\n          history.push(\"/checklists\"); // redirect to '/checklists' page\n        }\n      })\n      .catch(error => {\n        setSaving(false);\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  return (\n    <>\n      {!displayForm && (\n        <div>\n          <h2>{checklist.title}</h2>\n\n          <button\n            style={{ marginBottom: 20 }}\n            className=\"btn btn-primary add-task\"\n            onClick={() => setDisplayForm(true)}\n            disabled={!saved}\n          >\n            Edit Checklist\n          </button>\n\n          <ChecklistTaskView\n            tasks={checklist.tasks}\n            onTaskToggle={handleTaskToggle}\n            onSave={handleSave}\n          />\n        </div>\n      )}\n\n      {displayForm && (\n        <div>\n          <ChecklistForm\n            checklist={checklist}\n            errors={errors}\n            categories={categories}\n            onChange={handleChange}\n            onSave={handleSave}\n            saving={saving}\n          />\n        </div>\n      )}\n    </>\n  );\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist =\n    slug && state.checklists.length > 0\n      ? getChecklistBySlug(state.checklists, slug)\n      : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(\n        checklistActions.fetchChecklists,\n        dispatch\n      ),\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      ),\n      saveChecklist: bindActionCreators(\n        checklistActions.saveChecklist,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageChecklistPage);\n"]},"metadata":{},"sourceType":"module"}