{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ManageChecklistPage.js\";\n// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage(_ref) {\n  let checklists = _ref.checklists,\n      history = _ref.history,\n      props = _objectWithoutProperties(_ref, [\"checklists\", \"history\"]);\n\n  const _useState = useState(_objectSpread({}, props.checklist)),\n        _useState2 = _slicedToArray(_useState, 2),\n        checklist = _useState2[0],\n        setChecklist = _useState2[1]; // initialize to empty newTask\n\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1]; // initialize to empty object\n  // const [saving, setSaving] = useState(false);\n\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist(_objectSpread({}, props.checklist));\n    }\n  }, [props.actions, checklists.length, props.checklist]); // empty dependency array = only run useEffect once\n  // SHOULD BE ABLE TO DELETE!!!!\n  // ************************************\n  // // centralized change-handler\n  // function handleChange(event) {\n  //   const { name, value } = event.target; // retain local ref to event\n  //   setTask(prevTask => ({\n  //     ...prevTask, // needed to save previous changes between saves\n  //     [name]: value\n  //   }));\n  // }\n  // function formIsValid() {\n  //   const { title, category } = task;\n  //   const errors = {};\n  //   if (!title) errors.title = \"Title is required.\";\n  //   if (!category) errors.category = \"Category is required.\";\n  //   setErrors(errors);\n  //   // Form is valid if the errors object still has no properties\n  //   return Object.keys(errors).length === 0;\n  // }\n  // function handleSave(event) {\n  //   event.preventDefault();\n  //   if (!formIsValid()) return;\n  //   setSaving(true);\n  //   props.actions\n  //     .saveTask(task)\n  //     .then(() => {\n  //       console.log(task);\n  //       toast.success(\"Task saved.\");\n  //       // history is passed in from react-router from <Route>\n  //       history.push(\"/tasks\"); // redirect to '/tasks' page\n  //     })\n  //     .catch(error => {\n  //       setSaving(false);\n  //       setErrors({ onSave: error.message });\n  //     });\n  // }\n\n  console.log(checklist.title);\n  console.log(checklist.tasks);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, checklist.title), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, checklist.tasks));\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist = getChecklistBySlug(state.checklists, slug);\n  return {\n    checklist,\n    checklists: state.checklists\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(checklistActions.fetchChecklists, dispatch),\n      saveChecklist: bindActionCreators(checklistActions.saveChecklist, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageChecklistPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do/src/components/checklists/ManageChecklistPage.js"],"names":["React","useEffect","useState","PropTypes","connect","checklistActions","bindActionCreators","toast","ManageChecklistPage","checklists","history","props","checklist","setChecklist","errors","setErrors","length","actions","fetchChecklists","catch","error","alert","console","log","title","tasks","getChecklistBySlug","slug","find","mapStateToProps","state","ownProps","match","params","propTypes","object","isRequired","array","mapDispatchToProps","dispatch","saveChecklist"],"mappings":"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","sourcesContent":["// THIS PAGE IS FOR CHECKING OFF TASKS (as completed) ON A CHECKLIST (THAT IS ALL!!!)\n\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage({ checklists, history, ...props }) {\n  const [checklist, setChecklist] = useState({ ...props.checklist }); // initialize to empty newTask\n  const [errors, setErrors] = useState({}); // initialize to empty object\n  // const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist({ ...props.checklist });\n    }\n  }, [props.actions, checklists.length, props.checklist]); // empty dependency array = only run useEffect once\n\n  // SHOULD BE ABLE TO DELETE!!!!\n  // ************************************\n  // // centralized change-handler\n  // function handleChange(event) {\n  //   const { name, value } = event.target; // retain local ref to event\n  //   setTask(prevTask => ({\n  //     ...prevTask, // needed to save previous changes between saves\n  //     [name]: value\n  //   }));\n  // }\n\n  // function formIsValid() {\n  //   const { title, category } = task;\n  //   const errors = {};\n\n  //   if (!title) errors.title = \"Title is required.\";\n  //   if (!category) errors.category = \"Category is required.\";\n\n  //   setErrors(errors);\n  //   // Form is valid if the errors object still has no properties\n  //   return Object.keys(errors).length === 0;\n  // }\n\n  // function handleSave(event) {\n  //   event.preventDefault();\n  //   if (!formIsValid()) return;\n  //   setSaving(true);\n  //   props.actions\n  //     .saveTask(task)\n  //     .then(() => {\n  //       console.log(task);\n  //       toast.success(\"Task saved.\");\n  //       // history is passed in from react-router from <Route>\n  //       history.push(\"/tasks\"); // redirect to '/tasks' page\n  //     })\n  //     .catch(error => {\n  //       setSaving(false);\n  //       setErrors({ onSave: error.message });\n  //     });\n  // }\n\n  console.log(checklist.title);\n  console.log(checklist.tasks);\n\n  return (\n    <>\n      <div>{checklist.title}</div>\n      <div>{checklist.tasks}</div>\n    </>\n  );\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist = getChecklistBySlug(state.checklists, slug);\n\n  return {\n    checklist,\n    checklists: state.checklists\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(\n        checklistActions.fetchChecklists,\n        dispatch\n      ),\n      saveChecklist: bindActionCreators(\n        checklistActions.saveChecklist,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageChecklistPage);\n"]},"metadata":{},"sourceType":"module"}