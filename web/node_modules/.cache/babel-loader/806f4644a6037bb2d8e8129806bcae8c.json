{"ast":null,"code":"import _slicedToArray from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/to-do/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do/src/components/home/HomePage.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport { bindActionCreators } from \"redux\";\nimport CompletedTaskList from \"../checklists/CompletedTaskList\";\n\nfunction HomePage(_ref) {\n  let checklists = _ref.checklists,\n      props = _objectWithoutProperties(_ref, [\"checklists\"]);\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        completedTasks = _useState2[0],\n        setCompletedTasks = _useState2[1];\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      // set checklist in local state to update when prop updates\n      const newCompletedTasks = [];\n\n      for (let checklist of checklists) {\n        for (let task of checklist.tasks) {\n          if (task.completed === true) {\n            newCompletedTasks.push({\n              checklistId: checklist.id,\n              checklistTitle: checklist.title,\n              checklistSlug: checklist.slug,\n              taskId: task.id,\n              taskTitle: task.title,\n              body: task.body,\n              category: task.category,\n              timeOfCompletion: task.timeOfCompletion\n            });\n          }\n        }\n      }\n\n      newCompletedTasks.sort((a, b) => {\n        return b.timeOfCompletion - a.timeOfCompletion;\n      });\n      setCompletedTasks(newCompletedTasks);\n    }\n  }, [checklists, checklists.length, props.actions, props.checklists]);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"jumbotron\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Akin's (Redux) To-Do App\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"There are to-do apps and then there are to-do apps...\")), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Completed Tasks\"), React.createElement(CompletedTaskList, {\n    completedTasks: completedTasks,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }));\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\n\nfunction mapStateToProps(state) {\n  return {\n    checklists: state.checklists\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nHomePage.propTypes = {\n  checklists: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(checklistActions.fetchChecklists, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do/src/components/home/HomePage.js"],"names":["React","useState","useEffect","PropTypes","connect","checklistActions","bindActionCreators","CompletedTaskList","HomePage","checklists","props","completedTasks","setCompletedTasks","length","actions","fetchChecklists","catch","error","alert","newCompletedTasks","checklist","task","tasks","completed","push","checklistId","id","checklistTitle","title","checklistSlug","slug","taskId","taskTitle","body","category","timeOfCompletion","sort","a","b","mapStateToProps","state","propTypes","array","isRequired","object","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport { bindActionCreators } from \"redux\";\nimport CompletedTaskList from \"../checklists/CompletedTaskList\";\n\nfunction HomePage({ checklists, ...props }) {\n  const [completedTasks, setCompletedTasks] = useState([]);\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      // set checklist in local state to update when prop updates\n      const newCompletedTasks = [];\n      for (let checklist of checklists) {\n        for (let task of checklist.tasks) {\n          if (task.completed === true) {\n            newCompletedTasks.push({\n              checklistId: checklist.id,\n              checklistTitle: checklist.title,\n              checklistSlug: checklist.slug,\n              taskId: task.id,\n              taskTitle: task.title,\n              body: task.body,\n              category: task.category,\n              timeOfCompletion: task.timeOfCompletion\n            });\n          }\n        }\n      }\n\n      newCompletedTasks.sort((a, b) => {\n        return b.timeOfCompletion - a.timeOfCompletion;\n      });\n\n      setCompletedTasks(newCompletedTasks);\n    }\n  }, [checklists, checklists.length, props.actions, props.checklists]);\n\n  return (\n    <>\n      <div className=\"jumbotron\">\n        <h1>Akin's (Redux) To-Do App</h1>\n        <p>There are to-do apps and then there are to-do apps...</p>\n      </div>\n\n      <h2>Completed Tasks</h2>\n\n      <CompletedTaskList completedTasks={completedTasks}></CompletedTaskList>\n    </>\n  );\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state) {\n  return {\n    checklists: state.checklists\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nHomePage.propTypes = {\n  checklists: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(\n        checklistActions.fetchChecklists,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HomePage);\n"]},"metadata":{},"sourceType":"module"}