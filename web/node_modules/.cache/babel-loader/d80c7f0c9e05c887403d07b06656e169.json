{"ast":null,"code":"import _objectSpread from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/checklists/ManageChecklistPage.js\";\n// container component for adding and or editing checklists\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport ChecklistForm from \"./ChecklistForm\";\nimport newChecklist from \"./newChecklist\";\nimport newTask from \"../tasks/newTask\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage(_ref) {\n  let checklists = _ref.checklists,\n      categories = _ref.categories,\n      history = _ref.history,\n      props = _objectWithoutProperties(_ref, [\"checklists\", \"categories\", \"history\"]);\n\n  const _useState = useState(_objectSpread({}, props.checklist)),\n        _useState2 = _slicedToArray(_useState, 2),\n        checklist = _useState2[0],\n        setChecklist = _useState2[1]; // initialize to empty newTask\n\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        errors = _useState4[0],\n        setErrors = _useState4[1]; // initialize to empty object\n\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        saving = _useState6[0],\n        setSaving = _useState6[1];\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist(_objectSpread({}, props.checklist));\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    } // don't put unnecessary variables in the dependency array, screws up change-handler\n\n  }, [props.actions, checklists.length, props.checklist, categories.length]); // centralized change-handler\n\n  function handleChange(event, index) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value; // retain local ref to event\n    // will only apply to elements in the task array\n\n    if (typeof index !== \"undefined\") {\n      /* to copy array of objects, must use map, [...notation] \n      create new array but just POINT to ORIGINAL objects\n      and mute state\n      */\n      const newTasks = checklist.tasks.map(task => {\n        return _objectSpread({}, task);\n      });\n      newTasks[index][name] = value;\n      setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n        tasks: newTasks\n      }));\n    } else {\n      setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n        // needed to save previous changes between saves\n        [name]: value\n      }));\n    }\n  }\n\n  function formIsValid() {\n    const title = checklist.title,\n          tasks = checklist.tasks;\n    const errors = {};\n    const titles = checklist.tasks.filter(task => {\n      return task.title;\n    });\n    const categories = checklist.tasks.filter(task => {\n      return task.category;\n    });\n    if (!title) errors.title = \"Title is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n    if (titles.length !== tasks.length) errors.titles = \"Title is required.\";\n    if (categories.length !== tasks.length) errors.categories = \"Category is required.\";\n    setErrors(errors); // Form is valid if the errors object still has no properties\n\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSave(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSaving(true);\n    props.actions.saveChecklist(checklist).then(() => {\n      console.log(checklist);\n      toast.success(\"Checklist saved.\"); // history is passed in from react-router from <Route>\n\n      history.push(\"/checklists\"); // redirect to '/tasks' page\n    }).catch(error => {\n      setSaving(false);\n      setErrors({\n        onSave: error.message\n      });\n    });\n  }\n\n  function handleAddTask(event) {\n    event.preventDefault();\n    const newTasks = checklist.tasks.map(task => {\n      return _objectSpread({}, task);\n    });\n    newTasks.push(newTask);\n    setChecklist(prevChecklist => _objectSpread({}, prevChecklist, {\n      tasks: newTasks\n    }));\n    props.actions.saveChecklist(checklist).then(() => {\n      console.log(checklist);\n      toast.success(\"Checklist saved.\");\n    }).catch(error => {\n      setErrors({\n        onSave: error.message\n      });\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(ChecklistForm, {\n    checklist: checklist,\n    tasks: checklist.tasks,\n    errors: errors,\n    categories: categories,\n    onChange: handleChange,\n    onSave: handleSave,\n    saving: saving,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  })));\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n} // which parts of the state (DEPARTMENTS) to expose this component via props\n\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist = slug && state.checklists.length > 0 ? getChecklistBySlug(state.checklists, slug) : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n/* must specify the type for each prop (from mapStateToProps above)\n */\n\n\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n}; // which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(checklistActions.fetchChecklists, dispatch),\n      fetchCategories: bindActionCreators(categoryActions.fetchCategories, dispatch),\n      saveChecklist: bindActionCreators(checklistActions.saveChecklist, dispatch)\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageChecklistPage);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/to-do (backup-fuck-hooks)/src/components/checklists/ManageChecklistPage.js"],"names":["React","useEffect","useState","PropTypes","connect","checklistActions","categoryActions","ChecklistForm","newChecklist","newTask","bindActionCreators","toast","ManageChecklistPage","checklists","categories","history","props","checklist","setChecklist","errors","setErrors","saving","setSaving","length","actions","fetchChecklists","catch","error","alert","fetchCategories","handleChange","event","index","target","name","value","newTasks","tasks","map","task","prevChecklist","formIsValid","title","titles","filter","category","Object","keys","handleSave","preventDefault","saveChecklist","then","console","log","success","push","onSave","message","handleAddTask","getChecklistBySlug","slug","find","mapStateToProps","state","ownProps","match","params","propTypes","object","isRequired","array","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// container component for adding and or editing checklists\n\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as checklistActions from \"../../redux/actions/checklistActions\";\nimport * as categoryActions from \"../../redux/actions/categoryActions\";\nimport ChecklistForm from \"./ChecklistForm\";\nimport newChecklist from \"./newChecklist\";\nimport newTask from \"../tasks/newTask\";\nimport { bindActionCreators } from \"redux\";\nimport { toast } from \"react-toastify\";\n\nfunction ManageChecklistPage({ checklists, categories, history, ...props }) {\n  const [checklist, setChecklist] = useState({ ...props.checklist }); // initialize to empty newTask\n  const [errors, setErrors] = useState({}); // initialize to empty object\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    if (checklists.length === 0) {\n      // only need access to entire task array to make sure it isn't empty\n      props.actions.fetchChecklists().catch(error => {\n        alert(\"Loading checklists failed\" + error);\n      });\n    } else {\n      //set checklist in local state to update when prop updates\n      setChecklist({ ...props.checklist });\n    }\n\n    if (categories.length === 0) {\n      props.actions.fetchCategories().catch(error => {\n        alert(\"Loading categories failed\" + error);\n      });\n    } // don't put unnecessary variables in the dependency array, screws up change-handler\n  }, [props.actions, checklists.length, props.checklist, categories.length]);\n\n  // centralized change-handler\n  function handleChange(event, index) {\n    const { name, value } = event.target; // retain local ref to event\n    // will only apply to elements in the task array\n    if (typeof index !== \"undefined\") {\n      /* to copy array of objects, must use map, [...notation] \n      create new array but just POINT to ORIGINAL objects\n      and mute state\n      */\n      const newTasks = checklist.tasks.map(task => {\n        return { ...task };\n      });\n      newTasks[index][name] = value;\n      setChecklist(prevChecklist => ({\n        ...prevChecklist,\n        tasks: newTasks\n      }));\n    } else {\n      setChecklist(prevChecklist => ({\n        ...prevChecklist, // needed to save previous changes between saves\n        [name]: value\n      }));\n    }\n  }\n\n  function formIsValid() {\n    const { title, tasks } = checklist;\n    const errors = {};\n    const titles = checklist.tasks.filter(task => {\n      return task.title;\n    });\n    const categories = checklist.tasks.filter(task => {\n      return task.category;\n    });\n\n    if (!title) errors.title = \"Title is required.\";\n    if (tasks.length < 2) errors.tasks = \"Must have at least 2 tasks.\";\n    if (titles.length !== tasks.length) errors.titles = \"Title is required.\";\n    if (categories.length !== tasks.length)\n      errors.categories = \"Category is required.\";\n\n    setErrors(errors);\n    // Form is valid if the errors object still has no properties\n    return Object.keys(errors).length === 0;\n  }\n\n  function handleSave(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    setSaving(true);\n    props.actions\n      .saveChecklist(checklist)\n      .then(() => {\n        console.log(checklist);\n        toast.success(\"Checklist saved.\");\n        // history is passed in from react-router from <Route>\n        history.push(\"/checklists\"); // redirect to '/tasks' page\n      })\n      .catch(error => {\n        setSaving(false);\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  function handleAddTask(event) {\n    event.preventDefault();\n    const newTasks = checklist.tasks.map(task => {\n      return { ...task };\n    });\n    newTasks.push(newTask);\n    setChecklist(prevChecklist => ({\n      ...prevChecklist,\n      tasks: newTasks\n    }));\n    props.actions\n      .saveChecklist(checklist)\n      .then(() => {\n        console.log(checklist);\n        toast.success(\"Checklist saved.\");\n      })\n      .catch(error => {\n        setErrors({ onSave: error.message });\n      });\n  }\n\n  return (\n    <>\n      <div>\n        <ChecklistForm\n          checklist={checklist}\n          tasks={checklist.tasks}\n          errors={errors}\n          categories={categories}\n          onChange={handleChange}\n          onSave={handleSave}\n          saving={saving}\n        />\n      </div>\n    </>\n  );\n}\n\nexport function getChecklistBySlug(checklists, slug) {\n  // return the checklist that matches the given slug in url or return null\n  return checklists.find(checklist => checklist.slug === slug) || null;\n}\n\n// which parts of the state (DEPARTMENTS) to expose this component via props\nfunction mapStateToProps(state, ownProps) {\n  /* ownProps has routing related props from React Router, including URL data, i.e. slug */\n  const slug = ownProps.match.params.slug;\n  const checklist =\n    slug && state.checklists.length > 0\n      ? getChecklistBySlug(state.checklists, slug)\n      : newChecklist; // post-backs w/ newCategory until category has loaded from slug\n  return {\n    checklist,\n    checklists: state.checklists,\n    categories: state.categories\n  };\n}\n\n/* must specify the type for each prop (from mapStateToProps above)\n */\nManageChecklistPage.propTypes = {\n  checklist: PropTypes.object.isRequired,\n  checklists: PropTypes.array.isRequired,\n  categories: PropTypes.array.isRequired,\n  actions: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\n// which (forms) ACTOIN CREATORS are available to drop off to dispatch (form receiver/ bad mail man) on this component\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      fetchChecklists: bindActionCreators(\n        checklistActions.fetchChecklists,\n        dispatch\n      ),\n      fetchCategories: bindActionCreators(\n        categoryActions.fetchCategories,\n        dispatch\n      ),\n      saveChecklist: bindActionCreators(\n        checklistActions.saveChecklist,\n        dispatch\n      )\n    }\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageChecklistPage);\n"]},"metadata":{},"sourceType":"module"}