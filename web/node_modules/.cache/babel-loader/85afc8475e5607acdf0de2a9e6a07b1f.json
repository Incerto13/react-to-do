{"ast":null,"code":"// import React, { Component } from \"react\";\n// import PropTypes from \"prop-types\";\n// import { connect } from \"react-redux\";\n// // import { fetchTasks } from \"../redux/actions/taskActions\";\n// class TaskList extends Component {\n//   componentWillMount() {\n//     this.props.fetchTasks();\n//   }\n//   componentDidUpdate(prevProps) {\n//     if (this.props.newTask !== prevProps.newTask) {\n//       this.props.fetchTasks();\n//     }\n//   }\n//   render() {\n//     const taskItems = this.props.tasks.map(task => (\n//       <div className=\"task\" key={task.id}>\n//         <h3>{task.title}</h3>\n//         <p>{task.body}</p>\n//       </div>\n//     ));\n//     return (\n//       <div>\n//         <h1>Task List</h1>\n//         {taskItems}\n//       </div>\n//     );\n//   }\n// }\n// TaskList.propTypes = {\n//   fetchTasks: PropTypes.func.isRequired,\n//   tasks: PropTypes.array.isRequired,\n//   newTask: PropTypes.object // not required bc you're not always adding a task\n// };\n// //** maybe change this to a function (like Cory did) and add mapDispatchToProps???\n// const mapStateToProps = state => ({\n//   tasks: state.tasks.items,\n//   newTask: state.tasks.item\n// });\n// export default connect(\n//   mapStateToProps,\n//   { fetchTasks }\n// )(TaskList);","map":{"version":3,"sources":["/home/akin/dev/JS/react/Projects/react-games/to-do_(backup)/src/components/TaskList.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["// import React, { Component } from \"react\";\n// import PropTypes from \"prop-types\";\n// import { connect } from \"react-redux\";\n// // import { fetchTasks } from \"../redux/actions/taskActions\";\n\n// class TaskList extends Component {\n//   componentWillMount() {\n//     this.props.fetchTasks();\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if (this.props.newTask !== prevProps.newTask) {\n//       this.props.fetchTasks();\n//     }\n//   }\n\n//   render() {\n//     const taskItems = this.props.tasks.map(task => (\n//       <div className=\"task\" key={task.id}>\n//         <h3>{task.title}</h3>\n//         <p>{task.body}</p>\n//       </div>\n//     ));\n\n//     return (\n//       <div>\n//         <h1>Task List</h1>\n//         {taskItems}\n//       </div>\n//     );\n//   }\n// }\n\n// TaskList.propTypes = {\n//   fetchTasks: PropTypes.func.isRequired,\n//   tasks: PropTypes.array.isRequired,\n//   newTask: PropTypes.object // not required bc you're not always adding a task\n// };\n\n// //** maybe change this to a function (like Cory did) and add mapDispatchToProps???\n\n// const mapStateToProps = state => ({\n//   tasks: state.tasks.items,\n//   newTask: state.tasks.item\n// });\n\n// export default connect(\n//   mapStateToProps,\n//   { fetchTasks }\n// )(TaskList);\n"]},"metadata":{},"sourceType":"module"}